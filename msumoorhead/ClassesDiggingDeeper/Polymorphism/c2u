.. activecode:: c2u
    :author: jenkins
    :difficulty: 3.0
    :basecourse: msumoorhead
    :topic: ClassesDiggingDeeper/Polymorphism
    :from_source: None

    def gcd(m, n):
        while m % n != 0:
            oldm = m
            oldn = n
            m = oldn
            n = oldm % oldn
        return n

    class Fraction:
        def __init__(self, top, bottom):
            self.__num = top        # the numerator is on top
            self.__den = bottom     # the denominator is on the bottom

        def __str__(self):
            return '{}/{}'.format(self.__num, self.__den)

        def __add__(self,val):
            if isinstance(val,Fraction):
                other = val
            elif isinstance(val,int):
                other = Fraction(val,1)

            newnum = self.__num * other.__den + self.__den * other.__num
            newden = self.__den * other.__den
            common = gcd(newnum, newden)
            return Fraction(newnum // common, newden // common)

    a = Fraction(2,3)
    b = Fraction(1,2)
    print(a + b)
    print(b + 2)

