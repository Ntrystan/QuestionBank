.. activecode:: ee_inheritance_051
   :author: Brad Miller
   :difficulty: 3
   :basecourse: pip2
   :topic: Inheritance/ExtraExercises
   :from_source: None
   :tags: Inheritance/inheritVarsAndMethods.rst


   class Trainer():
       attack = 10
       defense = 12
       health = 10

       def __init__(self, pokemon_name, level = 5):
           self.pokemon_name = pokemon_name
           self.p_type = "Normal"
           self.level = level
           self.health_boost = 4
           self.attack_boost = 2
           self.defense_boost = 3

       def __str__(self):
           return "Pokemon name: {}, Type: {}, Level: {}".format(self.pokemon_name, self.p_type, self.level)

       def train(self):
           self.Attack_up()
           self.Defense_up()
           self.health_up()
           if (self.level + 1 % 15) == 0:
               print "{} Evolved!".format(self.pokemon_name)
           self.level += 1
           return self.level

       def Attack_up(self):
           self.attack = self.attack + self.attack_boost
           return self.attack

       def Defense_up(self):
           self.defense += self.defense_boost
           return self.defense

       def health_up(self):
           self.health += self.health_boost
           return self.health


   class WaterPokemon(Trainer):

       def update(self):
           self.p_type = "Water"

   class IcePokemon(Trainer):

       def update(self):
           self.p_type = "Ice"

   class BugPokemon(Trainer):
       def update(self):
           self.p_type = "Bug"

   class FirePokemon(Trainer):
       def update(self):
           self.p_type = "Fire"




   =====

   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):
      water_test.update()
      ice_test.update()
      fire_test.update()
      bug_test.update()
      trainer_test.strengths()
      water_test.strengths()
      ice_test.strengths()
      fire_test.strengths()
      bug_test.strengths()

      def testOne(self):
         self.assertEqual(sorted(trainer_test.strengths()), sorted(['Ice', 'Water', 'Fire', 'Bug', 'Normal']), "Testing the return value for Trainer.strengths()")
         self.assertEqual(sorted(water_test.strengths()), sorted(['Fire', 'Normal', 'Bug', 'Ice']), "Testing the return value for WaterPokemon.strengths()")
         self.assertEqual(sorted(ice_test.strengths()), sorted(['Normal', 'Bug']), "Testing the return value for IcePokemon.strengths()")
         self.assertEqual(sorted(fire_test.strengths()), sorted(['Normal', 'Ice', 'Bug']), "Testing the return value for FirePokemon.strengths()")
         self.assertEqual(sorted(bug_test.strengths()), sorted(['Normal', 'Water', 'Ice', 'Bug']), "Testing the return value for BugPokemon.strengths()")

   myTests().main()