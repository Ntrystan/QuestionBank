.. activecode:: prediction_7b:
    :author: Brad Miller
    :difficulty: 3
    :basecourse: pip2
    :topic: Prediction/shannon_guesser
    :from_source: None
    :nocanvas:
    :include: prediction_7a

    def performance(txt, rls):
        # txt is a string
        # rls is a list of tuples; each tuple represents one rule
        # Run the guesser on txt and print out the overall performance

        tot = 0 # initialize accumulator for total guesses required
        prev_txt = ""
        for c in txt:
            to_try = guesser(prev_txt, rls)
            # find out position of the next character of txt, in the guesses list to_try
            # That's how many guesses it would take before you make the right guess
            guess_count = to_try.index(c)
            tot += guess_count
            # c has now been revealed, so add it to prev_txt
            prev_txt += c
        # done with the for loop; print the overall performance
        print "%d characters to guess\t%d guesses\t%.2f guesses per character, on average\n" % (len(txt) -1, tot, float(tot)/(len(txt) -1))



    print "Without the U after Q rule"
    performance(test_txt, [(None, alphabet)])

    print "With the U after Q rule"
    performance(test_txt, [('Q', ['U']), (None, alphabet)])