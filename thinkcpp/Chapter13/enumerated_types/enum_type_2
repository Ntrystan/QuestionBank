.. mchoice:: enum_type_2
   :author: bmiller
   :difficulty: 3.0
   :basecourse: thinkcpp
   :topic: Chapter13/enumerated_types
   :from_source: T
   :answer_a: Who ordered a triple scoop of Cookies 'n' Cream in a sugar cone?
   :answer_b: Who ordered a double scoop of Strawberry in a cake cone?
   :answer_c: Who ordered a double scoop of Cookies 'n' Cream in a sugar cone?
   :answer_d: Who ordered a triple scoop of Strawberry in a cake cone?
   :answer_e: Who ordered a triple scoop of Mint Chocolate Chip in a Waffle Cone?
   :correct: c
   :feedback_a: Remember that we performed an override for one of the enumerated types!
   :feedback_b: Remember that the default enumeration starts at 0.
   :feedback_c: 2 corresponds to "double", 3 corresponds to "Cookies 'n' Cream", and 2 corresponds to "sugar cone".
   :feedback_d: Remember that we performed an override for one of the enumerated types!  The default enumeration starts at 0.
   :feedback_e: Take another look at how we defined our enumerated types.

   Assume we have the following struct defined by this enumerated
   type.  What will be printed by the print function?

   ::

       enum Scoops { SINGLE = 1, DOUBLE, TRIPLE };
       enum Flavor { VANILLA, CHOCOLATE, STRAWBERRY, COOKIESNCREAM, MINTCHIP, COOKIEDOUGH };
       enum Order { CUP, CAKECONE, SUGARCONE, WAFFLECONE }

       struct iceCream {
          Scoops scoops;
          Flavor flavor;
          Order order;

          iceCream (Scoops s, Flavor f, Order o);
          printOrder () {
            // To save space, I didn't include the mapping.  I'm sure you can still figure it out.
            cout << "Who ordered a " << scoops[scoop] << " scoop of " << flavors[flavor] << " in a " << orders[order] << ?;
          }
       };

       int main () {
         iceCream icecream (2, 3, 2);
         iceCream.printOrder();
       }

