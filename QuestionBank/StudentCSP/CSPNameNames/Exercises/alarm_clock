.. activecode:: alarm_clock
   :author: Barbara  Ericson
   :difficulty: 0
   :basecourse: StudentCSP
   :topic: CSPNameNames/Exercises
   :from_source: F
   :autograde: unittest
   :nocodelens: 

   
   Given a day of the week encoded as 0=Sun, 1=Mon, 2=Tue, ...6=Sat, and a 
   boolean indicating if we are on vacation, return a string of the form "7:00" 
   indicating when the alarm clock should ring. Weekdays, the alarm should be
   "7:00" and on the weekend it should be "10:00". Unless we are on vacation -- 
   then on weekdays it should be "10:00" and weekends it should be "off".  
   ~~~~
   def alarm_clock(day, vacation):

   ====
   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):

       def testOne(self):
           self.assertEqual(alarm_clock(1,False), '7:00', "alarm_clock(1,False)")
           self.assertEqual(alarm_clock(5,False), '7:00', "alarm_clock(5,False)")
           self.assertEqual(alarm_clock(0,False), '10:00', "alarm_clock(0,False)")
           self.assertEqual(alarm_clock(6,False), '10:00', "alarm_clock(6,False)")
           self.assertEqual(alarm_clock(0,True), 'off', "alarm_clock(0,True)")
           self.assertEqual(alarm_clock(6,True), 'off', "alarm_clock(6,True)")
           self.assertEqual(alarm_clock(1, True), '10:00', "alarm_clock(1, True)")
           self.assertEqual(alarm_clock(3, True), '10:00', "alarm_clock(3, True)")
           self.assertEqual(alarm_clock(5, True), '10:00', "alarm_clock(5, True)")
         
              
   myTests().main()