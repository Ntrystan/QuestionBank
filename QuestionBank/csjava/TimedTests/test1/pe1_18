.. mchoice:: pe1_18
   :author: bmiller
   :difficulty: 3.0
   :basecourse: csjava
   :chapter: TimedTests
   :subchapter: test1
   :topics: TimedTests/test1
   :from_source: T
   :answer_a: { { 2, 1, 1, 1 }, { 2, 2, 1, 1 }, { 2, 2, 2, 1 } }
   :answer_b: { { 2, 3, 3, 3 }, { 1, 2, 3, 3 }, { 1, 1, 2, 3 } }
   :answer_c: { { 2, 1, 1 }, { 2, 2, 1 }, { 2, 2, 2 }, { 2, 2, 2 } }
   :answer_d: { { 2, 3, 3 }, { 1, 2, 3 }, { 1, 1, 2 }, { 1, 1, 1 } }
   :answer_e: { { 1, 3, 3, 3 }, { 2, 1, 3, 3 }, { 2, 2, 1, 3 } }
   :correct: b
   :feedback_a: This would be true if it was filling mat with 1 if the row index is less than the column index, but it fills with a 3 in this case.
   :feedback_b: This will fill mat with 3 if the row index is less than the column index, 2 if the row index is equal to the column index, and a 1 if the row index is greater than the column index.
   :feedback_c: This would be true if it was int [][] mat = new int [4][3] and it filled the mat with 1 if the row index is less than the column index.
   :feedback_d: This would be true if it was int [][] mat = new int [4][3]. Remember that the first number is the number of rows.
   :feedback_e: This would be true if it filled the mat with 1 if the row and column indices are equal and 2 if the row index is greater than the column index.

   Consider the following code segment, what are the contents of mat after the code segment has executed?

   .. code-block:: java

      int [][] mat = new int [3][4];
      for (int row = 0; row < mat.length; row++)
      {
         for (int col = 0; col < mat[0].length; col++)
         {
            if (row < col)
               mat[row][col] = 3;
            else if (row == col)
               mat[row][col] = 2;
            else
               mat[row][col] = 1;
         }
      }