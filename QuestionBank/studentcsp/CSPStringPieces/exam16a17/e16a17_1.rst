.. mchoice:: e16a17_1
   :author: bmiller
   :difficulty: 3.0
   :basecourse: studentcsp
   :chapter: CSPStringPieces
   :subchapter: exam16a17
   :topics: CSPStringPieces/exam16a17
   :from_source: T
   :practice: T
   :answer_a: [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1204, 2048]
   :answer_b: [1, 4, 16, 64, 256, 1024]
   :answer_c: [2, 8, 32, 128, 512, 2048]
   :answer_d: [1, 8, 64, 512]
   :answer_e: out of range error
   :correct: d
   :feedback_a: This would be true if it was range(len(numbers))
   :feedback_b: This would be true if it was range(0,len(numbers),2):
   :feedback_c: This would be true it it was range(1,len(numbers),2):
   :feedback_d: This code adds the values at indicies that are evenly divisible by 3 to the new answer array and prints the contents of the array.
   :feedback_e: This would be true if range included the second parameter, but it does not.  This will stop at one before the length of the array which is the last valid index.

   What does the following code print?

   ::

      numbers = [1,2,4,8,16,32,64,128,256,512,1024,2048]
      answer = []
      for index in range(0,len(numbers),3):
          answer = answer + [numbers[index]]
      print (answer)