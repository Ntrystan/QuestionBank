.. mchoice:: pe3_4
   :author: bmiller
   :difficulty: 3.0
   :basecourse: apcsareview
   :chapter: TimedTests
   :subchapter: test3
   :topics: TimedTests/test3
   :from_source: T
   :answer_a: Interface
   :answer_b: Polymorphism
   :answer_c: Inheritance (is-a)
   :answer_d: Association (has-a)
   :answer_e: Overloading
   :correct: d
   :feedback_a: An interface is a special kind of abstract class. It isn't a type of relationship between classes.
   :feedback_b: Polymorphism is using the run-time type of the object to determine which method to run.  It isn't a type of relationship between classes.
   :feedback_c: Inheritance is when one class (the child class) extends the other (the parent class).  Do you see the keyword extends here?
   :feedback_d: Association is when one class keeps track of one or more objects of the other class.  In this case a DogOwner object has an array of dog objects.
   :feedback_e: Overloading is when a class has two methods with the same name but the parameter lists are different.  It is not a type of relationship between classes.

   Given the following two class declarations, what is the relationship between Dog and DogOwner?

   .. code-block:: java

      public class Dog {
         private String name;

         public void setName(String n) {
            name = n;
         }

         public String getName() {
            return name;
         }
      }

      public class DogOwner {
         private String name;
         private Dog[] dogs;
      }