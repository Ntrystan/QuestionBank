.. activecode:: lst_change2cpp
    :author: bmiller
    :difficulty: 3
    :basecourse: cppds
    :topic: Recursion/DynamicProgramming
    :from_source: T
    :caption: Recursively Counting Coins with Table Lookup C++
    :language: cpp

    //A different attempt at making the change algorithm.

    #include <iostream>
    #include <vector>
    using namespace std;

    int recDC(vector<int> coinValueList, int change, int knownResults[]){
        int minCoins, numCoins;
        minCoins = change;

        for (unsigned int i = 0; i< coinValueList.size(); i++){ //this loop contains the base case,
                                                                //as it returns items that are not
                                                                //returning a call to the recDC function.
            if (coinValueList[i] == change){
                knownResults[change] = 1;
                return 1;
            }
            else if(knownResults[change] > 0){
                return knownResults[change];
            }
        }
        for (unsigned int y=0; y<coinValueList.size(); y++){
            if (coinValueList[y] <= change){
                numCoins = 1 + recDC(coinValueList, change - coinValueList[y], knownResults); //Recursive call
                if (numCoins < minCoins){
                    minCoins = numCoins;
                    knownResults[change] = minCoins;
                }
            }
        }
        return minCoins;
    }

    int main(){
        vector<int> coinValueList = {1, 5, 10, 21, 25};
        int change = 63;
        int knownResults[64] = {0};
        cout<<recDC(coinValueList, change, knownResults)<<endl;
        return 0;
    }