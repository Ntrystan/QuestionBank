.. mchoice:: qtnt3_1
   :author: bmiller
   :difficulty: 3
   :basecourse: csawesome
   :topic: Tests/test3nt
   :from_source: T
   :answer_a: 4
   :answer_b: 15
   :answer_c: 9
   :answer_d: 14
   :answer_e: 5
   :correct: c
   :feedback_a: The method makes more than 4 calls. Remember that the method must make a call to check every value of n, even if n is the value in the base case.
   :feedback_b: This would be correct if t(6) was used. Try tracing the code again.
   :feedback_c: t(5) returns t(4) - t(3). t(4) returns t(3) - t(2), while t(3) returns t(2) - t(1). If you trace the code throughout the calls, t is called 9 times.
   :feedback_d: This would be correct if the method reached the base case when n equaled 1 or 0, not 1 or 2. Check the code to see when a recursive call is made.
   :feedback_e: This would be correct if t(4) was called. Try tracing the code again.

   Consider the following segment of code.  For the method call ``t(5)``, how many calls to ``t`` will be made, including the original call?

   .. code-block:: java

     public int t(int n)
     {
         if (n == 1 || n == 2)
             return 2 * n;

         else
             return t(n - 1) - t(n - 2);
     }