.. mchoice:: pe3_6
   :author: bmiller
   :difficulty: 3.0
   :basecourse: csawesome
   :chapter: TimedTests
   :subchapter: test3
   :topics: TimedTests/test3
   :from_source: T
   :answer_a: test();
   :answer_b: super.super.test();
   :answer_c: super.test();
   :answer_d: this.test();
   :answer_e: There is no way to call a method in a grandparent class from a grandchild class
   :correct: e
   :feedback_a: This would run the test method in class C since the object was created by the C class.  When a method is called the runtime system will start looking for the method in the class that created the object.
   :feedback_b: You can't use super.super.  This would cause a compile-time error.
   :feedback_c: This would run the test method in class B since super is used to run a method in your parent class and B is the parent of C.
   :feedback_d: This would run the test method in class C.
   :feedback_e: You can use super to force the runtime to run a method in a parent class, but there is no way to force a call to a method in a grandparent (parent of your parent) class.
   :pct_on_first: 0.2291666667
   :total_students_attempting: 48
   :num_students_correct: 15.0
   :mean_clicks_to_correct: 1.2666666667

   Class C extends class B, which extends class A. Also, all of the three classes implement a public method test(). How can a method in an object of class C invoke the test() method defined in class A (without creating a new instance of class A)?