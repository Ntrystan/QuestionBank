.. activecode:: ac10_7_2
   :author: bmiller
   :difficulty: 3
   :basecourse: fopp
   :topic: Dictionaries/AccumulatingtheBestKey
   :from_source: T
   :language: python
   :autograde: unittest
   :practice: T
   :pct_on_first: 0.1370558376
   :total_students_attempting: 985
   :num_students_correct: 564.0
   :mean_clicks_to_correct: 4.3971631206

   **1.** Create a dictionary called ``d`` that keeps track of all the characters in the string ``placement`` and notes how many times each character was seen. Then, find the key with the lowest value in this dictionary and assign that key to ``min_value``.
   ~~~~
   placement = "Beaches are cool places to visit in spring however the Mackinaw Bridge is near. Most people visit Mackinaw later since the island is a cool place to explore."
   
   =====
   
   from unittest.gui import TestCaseGui
   
   class myTests(TestCaseGui):
   
      def testOne(self):
         self.assertEqual(sorted(d.keys()), sorted(['B', 'e', 'a', 'c', 'h', 's', ' ', 'r', 'o', 'l', 'p', 't', 'v', 'i', 'n', 'g', 'w', 'M', 'k', 'd', '.', 'x']), "Testing the keys were created correctly")
         self.assertEqual(sorted(d.values()), sorted([2, 17, 12, 8, 4, 10, 27, 7, 10, 8, 6, 8, 3, 13, 7, 2, 3, 3, 2, 2, 2, 1]), "Testing the values were created correctly")
      def testTwo(self):
         self.assertEqual(min_value, "x", "Testing that min_value has been correctly assigned")
   
   myTests().main()