.. activecode:: wof_ac_wof_player
    :author: bmiller
    :difficulty: 3
    :basecourse: fopp
    :topic: Inheritance/chapterProject
    :from_source: T
    :autograde: unittest
    :language: python
    :nocodelens: 
    :available_files: phrases.json phrases.json
    :pct_on_first: 0.0
    :total_students_attempting: 61
    :num_students_correct: 9.0
    :mean_clicks_to_correct: 37.0

    **Part A: ``WOFPlayer``**
    
    We're going to start by defining a class to represent a Wheel of Fortune player, called ``WOFPlayer``. Every instance of ``WOFPlayer`` has three instance variables:
    
    * ``.name``: The name of the player (should be passed into the constructor)
    * ``.prizeMoney``: The amount of prize money for this player (an integer, initialized to ``0``)
    * ``.prizes``: The prizes this player has won so far (a list, initialized to ``[]``)
    
    It should also have the following methods (note: we will exclude ``self`` in our descriptions):
    
    * ``.addMoney(amt)``: Add ``amt`` to ``self.prizeMoney``
    * ``.goBankrupt()``: Set ``self.prizeMoney`` to ``0``
    * ``.addPrize(prize)``: Add ``prize`` to ``self.prizes``
    * ``.__str__()``: Returns the player's name and prize money in the following format:
        * ``Steve ($1800)`` (for a player with instance variables ``.name == 'Steve'`` and ``prizeMoney == 1800``)
    
    **Part B: ``WOFHumanPlayer``**
    Next, we're going to define a class named ``WOFHumanPlayer``, which should inherit from ``WOFPlayer`` (part A). This class is going to represent a human player. In addition to having all of the instance variables and methods that ``WOFPlayer`` has, ``WOFHumanPlayer`` should have an additional method:
    
    * ``.getMove(category, obscuredPhrase, guessed)``: Should ask the user to enter a move and return **whatever they entered** no matter what they enter.
    
    ``.getMove()``'s prompt should be::
    
        {name} has ${prizeMoney}
    
        Category: {category}
        Phrase:  {obscured_phrase}
        Guessed: {guessed}
    
        Guess a letter, phrase, or type 'exit' or 'pass':
    
    For example::
    
        Steve has $200
    
        Category: Places
        Phrase: _L___ER N____N_L P_RK
        Guessed: B, E, K, L, N, P, R, X, Z
    
        Guess a letter, phrase, or type 'exit' or 'pass':
    
    The user can then enter:
    * ``'exit'`` to exit the game
    * ``'pass'`` to skip their turn
    * a single character to guess that character
    * a complete phrase -- anything other than ``'exit'`` or ``'pass'`` -- to guess that phrase
    
    Note that ``.getMove()`` **does not** need to enforce anything about the user's input; that will be done via the game logic.
    
    **Part C: ``WOFComputerPlayer``**
    Next, we're going to define a class named ``WOFComputerPlayer``, which should inherit from ``WOFPlayer`` (part A). This class is going to represent a computer player.
    
    Every computer player will have a ``difficulty``, where players with a higher ``difficulty`` generally play "better". There are many ways to implement this. We'll do the following:
    
    * Semi-randomly decide whether to make a "good" move or a "bad" move on a given turn (a higher difficulty should make it more likely for the player to make a "good" move)
        * If we decide to make a "bad" move, we'll randomly decide on a possible letter
        * If we decide to make a "good" move, we'll choose a letter according to their overall frequency in the English language
    * If there aren't any possible letters to choose (for example: if the last character is a vowel but this player doesn't have enough to guess a vowel), we'll ``'pass'``
    
    We'll implement this in the ``WOFComputerPlayer`` class. In addition to having all of the instance variables and methods that ``WOFPlayer`` has, ``WOFComputerPlayer`` should have:
    
    **Class variable**
    
    * ``.SORTED_FREQUENCIES``: Should be set to ``'ZQXJKVBPYGFWMUCLDRHSNIOATE'``, which is a list of English characters sorted from least frequent (``'Z'``) to most frequent (``'E'``). We'll use this when trying to make a "good" move.
    
    **Instance variables**
    
    * ``.difficulty``: The level of difficulty for this computer (should be passed as the second argument into the constructor after ``.name``)
    
    
    **Methods**
    
    * ``.smartCoinFlip()``: This method will help us decide semi-randomly whether to make a "good" or "bad" move (again, a higher difficulty should make us more likely to make a "good" move). You should implement this by choosing a random number between ``1`` and ``10`` using ``random.randint`` (see above) and returning ``True`` if that random number is greater than ``self.difficulty``. If the random number is equal to or less than ``self.difficulty`` then you should return ``False``.
    * ``.getPossibleLetters(guessed)``: This method should return a list of letters that can be guessed.
        * These should be characters that are in ``LETTERS`` (``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``) but **not** in the ``guessed`` parameter.
        * Additionally, if this player doesn't have enough prize money to guess a vowel (``VOWEL_COST``), then vowels (``VOWELS``: ``'AEIOU'``) should **not** be included
    * ``.getMove(category, obscuredPhrase, guessed)``: Should return a valid move.
        * Use the ``.getPossibleLetters(guessed)`` method described above.
        * If there aren't any letters that can be guessed (this can happen if the only letters left to guess are vowels and the player doesn't have enough for vowels), return ``'pass'``
        * Use the ``.smartCoinFlip()`` method to decide whether to make a "good" or a "bad" move
            * If making a "good" move (``.smartCoinFlip()`` returns ``True``), then return the most frequent (highest index in ``.SORTED_FREQUENCIES``) possible character
            * If making a "bad" move (``.smartCoinFlip()`` returns ``False``), then return a random character from the set of possible characters (use ``random.choice()``)
    
    
    ~~~~
    VOWEL_COST = 250
    LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    VOWELS = 'AEIOU'
    
    # PART A: WOFPlayer
    
    # PART B: WOFHumanPlayer
    
    # PART C: WOFComputerPlayer
    
    ====
    from unittest.gui import TestCaseGui
    import random
    
    class MyTests(TestCaseGui):
        def testPartA(self):
            steve = WOFPlayer('Steve')
            paul = WOFPlayer('Paul')
            self.assertEqual(steve.name, "Steve", "Testing that the name instance variable was set correctly")
            self.assertEqual(paul.name, "Paul", "Testing that the name instance variable was set correctly")
    
            self.assertEqual(steve.prizeMoney, 0, "Testing that prizeMoney was initialized to 0")
            self.assertEqual(paul.prizeMoney, 0, "Testing that prizeMoney was initialized to 0")
    
            self.assertEqual(steve.prizes, [], "Testing that prizes was initialized to []")
            self.assertEqual(paul.prizes, [], "Testing that prizes was initialized to []")
    
            steve.addMoney(500)
            self.assertEqual(steve.prizeMoney, 500, "Testing that .addMoney modifies .prizeMoney")
            self.assertEqual(paul.prizeMoney, 0, "Testing that .addMoney does not modify .prizeMoney for other instances")
    
            self.assertEqual(steve.addMoney(100), None, "Testing that .addMoney returns None")
            steve.addMoney(100)
            self.assertEqual(steve.prizeMoney, 700, "Testing that .addMoney adds .prizeMoney (rather than just setting it)")
            self.assertEqual(paul.prizeMoney, 0, "Testing that .addMoney does not modify .prizeMoney for other instances")
    
            paul.addMoney(800)
            self.assertEqual(steve.prizeMoney, 700, "Testing that .addMoney does not modify .prizeMoney for the wrong instance")
            self.assertEqual(paul.prizeMoney, 800, "Testing that .addMoney works")
    
            steve.goBankrupt()
            self.assertEqual(steve.prizeMoney, 0, "Testing that .goBankrupt works")
            self.assertEqual(steve.goBankrupt(), None, "Testing that .goBankrupt returns None")
            self.assertEqual(paul.prizeMoney, 800, "Testing that .goBankrupt only affects the correct instance")
    
            steve.addPrize('prize1')
            self.assertEqual(steve.prizes, ['prize1'], "Testing that .addPrize correctly adds prizes to self.prizes")
            self.assertEqual(paul.prizes, [], "Testing that .addPrize only affects the correct instance")
    
            steve.addPrize('prize2')
            self.assertEqual(steve.prizes, ['prize1', 'prize2'], "Testing that .addPrize correctly adds prizes to self.prizes")
            self.assertEqual(paul.prizes, [], "Testing that .addPrize only affects the correct instance")
    
            self.assertEqual(paul.addPrize('prize3'), None, "Testing that .addPrize returns None")
            self.assertEqual(steve.prizes, ['prize1', 'prize2'], "Testing that .addPrize correctly adds prizes to self.prizes")
            self.assertEqual(paul.prizes, ['prize3'], "Testing that .addPrize correctly adds prizes to self.prizes")
    
            steve.addMoney(200)
            paul.goBankrupt()
    
            self.assertEqual(steve.prizeMoney, 200, "Testing .goBankrupt()")
            self.assertEqual(paul.prizeMoney, 0, "Testing .goBankrupt()")
    
            self.assertEqual(steve.prizes, ['prize1', 'prize2'], "Testing that .goBankrupt didn't affect prizes")
            self.assertEqual(paul.prizes, ['prize3'], "Testing that .goBankrupt didn't affect prizes")
    
            self.assertEqual(steve.__str__(), 'Steve ($200)', "Testing __str__")
    
        def testPartB(self):
            player = WOFHumanPlayer('p')
            self.assertTrue(issubclass(WOFHumanPlayer, WOFPlayer), "Testing that WOFHumanPlayer inherits from WOFPlayer")
            self.assertEqual(player.name, 'p', "Testing that the name was correctly set")
            self.assertEqual(player.prizeMoney, 0, "Testing that the prizeMoney was correctly set")
            self.assertEqual(player.prizes, [], "Testing that the prizes was correctly set")
    
        def testPartC(self):
            player = WOFComputerPlayer('c', 5)
            self.assertTrue(issubclass(WOFComputerPlayer, WOFPlayer), "Testing that WOFComputerPlayer inherits from WOFPlayer")
            self.assertEqual(player.name, 'c', "Testing that the name was correctly set")
            self.assertEqual(player.difficulty, 5, "Testing that the difficulty was correctly set")
            self.assertEqual(player.prizeMoney, 0, "Testing that the prizeMoney was correctly set")
            self.assertEqual(player.prizes, [], "Testing that the prizes was correctly set")
            self.assertEqual(player.SORTED_FREQUENCIES, 'ZQXJKVBPYGFWMUCLDRHSNIOATE', "Testing that SORTED_FREQUENCIES was correctly set")
            self.assertEqual(WOFComputerPlayer.SORTED_FREQUENCIES, 'ZQXJKVBPYGFWMUCLDRHSNIOATE', "Testing that SORTED_FREQUENCIES was set as a class variable")
    
            player.addMoney(9999) # can afford a vowel
            self.assertEqual(player.prizeMoney, 9999, "Testing that the prizeMoney was correctly set")
    
            LETTERS = [l for l in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ']
    
            anyInvalidGuesses = False
            for _ in range(100):
                guessed = random.sample(LETTERS, 10)
                move = player.getMove('Places & People', '_____ _____ ____', guessed)
                if move in guessed:
                    anyInvalidGuesses = (move, guessed)
                    break
                elif move.upper() not in LETTERS:
                    anyInvalidGuesses = (move, guessed)
                    break
    
            self.assertFalse(anyInvalidGuesses, "Made an invalid move ({} when guessed was {})".format(move, guessed))
    
            player.goBankrupt() # can't afford a vowel any more
            self.assertEqual(player.prizeMoney, 0, "Testing that the prizeMoney was correctly set")
    
            VOWELS  = [l for l in 'AEIOU']
    
            anyInvalidGuesses = False
            for _ in range(100):
                guessed = random.sample(LETTERS, 10)
                move = player.getMove('Places & People', '_____ _____ ____', guessed)
                if move in VOWELS:
                    anyInvalidGuesses = (move, guessed)
                    break
    
            self.assertFalse(anyInvalidGuesses, "Guessed a vowel when there wasn't enough prizeMoney")
    
            move = player.getMove('Places & People', '_____ _____ ____', LETTERS) # NO VALID GUESSES
            self.assertEqual(move, 'pass', "When there aren't any possible moves, getMove() should return 'pass'")
    
    MyTests().main()