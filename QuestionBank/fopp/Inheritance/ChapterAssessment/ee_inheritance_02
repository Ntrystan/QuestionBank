.. activecode:: ee_inheritance_02
   :author: bmiller
   :difficulty: 3
   :basecourse: fopp
   :topic: Inheritance/ChapterAssessment
   :from_source: T
   :tags: Inheritance/inheritVarsAndMethods.rst, Inheritance/OverrideMethods.rst
   :practice: T
   :topics: Inheritance/OverrideMethods
   :pct_on_first: 0.1804511278
   :total_students_attempting: 133
   :num_students_correct: 88.0
   :mean_clicks_to_correct: 4.3295454545

   Modify the ``Grass_Pokemon`` subclass so that the attack strength for ``Grass_Pokemon`` instances does not change until they reach level 10. At level 10 and up, their attack strength should increase by the ``attack_boost`` amount when they are trained.
   
   To test, create an instance of the class with the name as ``"Bulby"``. Assign the instance to the variable ``p2``. Create another instance of the ``Grass_Pokemon`` class with the name set to ``"Pika"`` and assign that instance to the variable ``p3``. Then, use ``Grass_Pokemon`` methods to train the ``p3`` ``Grass_Pokemon`` instance until it reaches at least level 10.
   ~~~~
   class Pokemon(object):
       attack = 12
       defense = 10
       health = 15
       p_type = "Normal"
   
       def __init__(self, name, level = 5):
           self.name = name
           self.level = level
   
       def train(self):
           self.update()
           self.attack_up()
           self.defense_up()
           self.health_up()
           self.level = self.level + 1
           if self.level%self.evolve == 0:
               return self.level, "Evolved!"
           else:
               return self.level
   
       def attack_up(self):
           self.attack = self.attack + self.attack_boost
           return self.attack
   
       def defense_up(self):
           self.defense = self.defense + self.defense_boost
           return self.defense
   
       def health_up(self):
           self.health = self.health + self.health_boost
           return self.health
   
       def update(self):
           self.health_boost = 5
           self.attack_boost = 3
           self.defense_boost = 2
           self.evolve = 10
   
       def __str__(self):
           return "Pokemon name: {}, Type: {}, Level: {}".format(self.name, self.p_type, self.level)
   
   class Grass_Pokemon(Pokemon):
       attack = 15
       defense = 14
       health = 12
       p_type = "Grass"
   
       def update(self):
           self.health_boost = 6
           self.attack_boost = 2
           self.defense_boost = 3
           self.evolve = 12
   
       def moves(self):
           self.p_moves = ["razor leaf", "synthesis", "petal dance"]
   
   
   =====
   
   from unittest.gui import TestCaseGui
   
   class myTests(TestCaseGui):
   
      def testOneA(self):
         self.assertEqual(p2.__str__(), "Pokemon name: Bulby, Type: Grass, Level: 5", "Testing that p2 is assigned to correct value.")
      def testOneB(self):
         self.assertTrue(p3.attack_up() >= 17, "Testing that attack value is assigned to correct value at level 10.")
   
   myTests().main()