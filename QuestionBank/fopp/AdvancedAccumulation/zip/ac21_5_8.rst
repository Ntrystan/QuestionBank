.. activecode:: ac21_5_8
   :author: bmiller
   :difficulty: 1.0789290495
   :basecourse: fopp
   :chapter: AdvancedAccumulation
   :subchapter: zip
   :topics: AdvancedAccumulation/zip
   :from_source: T
   :language: python
   :autograde: unittest
   :chatcodes: 
   :practice: T
   :pct_on_first: 0.4615384615
   :total_students_attempting: 130
   :num_students_correct: 100.0
   :mean_clicks_to_correct: 2.34

   **1.** Below we have provided two lists of numbers, ``L1`` and ``L2``. Using zip and list comprehension, create a new list, ``L3``, that sums the two numbers if the number from ``L1`` is greater than 10 and the number from ``L2`` is less than 5. This can be accomplished in one line of code.
   ~~~~
   
   L1 = [1, 5, 2, 16, 32, 3, 54, 8, 100]
   L2 = [1, 3, 10, 2, 42, 2, 3, 4, 3]
   
   =====
   
   from unittest.gui import TestCaseGui
   
   class myTests(TestCaseGui):
   
      def testSix(self):
         self.assertEqual(L3, [18, 57, 103], "Testing that L3 is assigned to correct values")
         self.assertNotIn('map(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
         self.assertNotIn('filter(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
         self.assertNotIn('sum(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
         self.assertIn('zip(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
   
   myTests().main()