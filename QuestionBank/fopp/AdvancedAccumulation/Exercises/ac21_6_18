.. actex:: ac21_6_18
   :author: bmiller
   :difficulty: 3
   :basecourse: fopp
   :topic: AdvancedAccumulation/Exercises
   :from_source: T
   :pct_on_first: 0.2432432432
   :total_students_attempting: 37
   :num_students_correct: 30.0
   :mean_clicks_to_correct: 5.4

   **Challenge** The nested for loop given takes in a list of lists and combines the elements into a single list. Do the same thing using a list comprehension for the list ``L``. Assign it to the variable ``result2``.
   ~~~~
   
   def onelist(lst):
       result = []
       for each_list in lst:
           for item in each_list:
               result.append(item)
       return result
   
   L = [["hi", "bye"], ["hello", "goodbye"], ["hola", "adios", "bonjour", "au revoir"]]
   
   =====
   
   from unittest.gui import TestCaseGui
   
   class myTests(TestCaseGui):
   
       def testSeven(self):
           self.assertEqual(result2, ['hi', 'bye', 'hello', 'goodbye', 'hola', 'adios', 'bonjour', 'au revoir'], "Testing that result2 is assigned to correct values")
           self.assertNotIn('map(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
           self.assertNotIn('filter(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
           self.assertNotIn('sum(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
           self.assertNotIn('zip(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
   
   myTests().main()