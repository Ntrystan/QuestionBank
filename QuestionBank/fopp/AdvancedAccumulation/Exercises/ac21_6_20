.. actex:: ac21_6_20
   :author: bmiller
   :difficulty: 3.0
   :basecourse: fopp
   :chapter: AdvancedAccumulation
   :subchapter: Exercises
   :topics: AdvancedAccumulation/Exercises
   :from_source: T
   :pct_on_first: 0.6111111111
   :total_students_attempting: 54
   :num_students_correct: 47.0
   :mean_clicks_to_correct: 1.5957446809

   **Challenge:** Below, we have provided a list of lists that contain numbers. Using list comprehension, create a new list ``threes`` that contains all the numbers from the original list that are divisible by 3. This can be accomplished in one line of code.
   ~~~~
   
   nums = [[4, 3, 12, 10], [8, 7, 6], [5, 18, 15, 7, 11], [9, 4], [24, 20, 17], [3, 5]]
   
   =====
   
   from unittest.gui import TestCaseGui
   
   class myTests(TestCaseGui):
   
       def testOne(self):
           self.assertEqual(threes, [3, 12, 6, 18, 15, 9, 24, 3], "Testing that threes was created correctly.")
           self.assertNotIn('map(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
           self.assertNotIn('filter(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
           self.assertNotIn('sum(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
           self.assertNotIn('zip(', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
   
   myTests().main()