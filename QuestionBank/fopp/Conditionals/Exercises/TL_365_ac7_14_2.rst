.. actex:: TL_365_ac7_14_2
   :author: Tyler Luchko
   :difficulty: 0.0
   :basecourse: fopp
   :chapter: Conditionals
   :subchapter: Exercises
   :topics: Conditionals/Exercises
   :from_source: F
   :language: python
   :autograde: unittest
   :pct_on_first: 0.1404958678
   :total_students_attempting: 121
   :num_students_correct: 57.0
   :mean_clicks_to_correct: 5.5263157895

   A year is a **leap year** if it is divisible by 4; however, if the
   year can be evenly divided by 100, it is NOT a leap year, unless
   the year is **also** evenly divisible by 400 then it is a leap
   year. Below are some examples of what the output should be for
   various inputs.
   
   .. table::
   
      =======  =====
      Year     Leap?
      =======  =====
      1944     True
      2011     False
      1986     False
      1800     False
      1900     False
      2000     True
      2056     True
      =======  =====
   
   Determine whether or not each year in the variable ``years`` is a
   leap year or not.  If it is, add ``True`` to a new list called
   ``is_leap_year``, otherwise add ``False``.
   
   ~~~~
   
   years = [1967, 1900, 1400, 1628, 1701, 1217, 1359, 1300, 2000, 1054,
           1724, 1000, 1800, 1100, 2100, 1023, 1600, 1500, 1358, 1160,
           1700, 1744, 2009, 1200]
   
   ====
   from unittest.gui import TestCaseGui
   import re
   import math
   class myTests(TestCaseGui):
       def testOne(self):
    output = self.getOutput().split('\n')
    editor = self.getEditorText().split('\n')
    float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'
    
           _years = [1967, 1900, 1400, 1628, 1701, 1217, 1359, 1300, 2000, 1054,
                    1724, 1000, 1800, 1100, 2100, 1023, 1600, 1500, 1358, 1160,
                    1700, 1744, 2009, 1200]
    _is_leap_year = []
    for _year in _years:
        if _year % 4 == 0 :
            if _year % 100 == 0:
                _is_leap_year.append( _year % 400 == 0)
            else:
                _is_leap_year.append(True)
               else:
            _is_leap_year.append(False)
        
    self.assertEqual(is_leap_year, _is_leap_year, 'Checking answer')
        
    # hardcode check
    float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'
    print_float_re = r'print\( *'+float_re+' *\)'
    self.assertFalse(re.search(print_float_re, self.getEditorText()), 'Checking for hardcoding')
    # LOOK FOR IF STATEMENTS
    outer_ifs = re.findall(r'^(if .*: *)$', self.getEditorText(), re.M)
    outer_elifs = re.findall(r'^(elif .*: *)$', self.getEditorText(), re.M)
    outer_elses = re.findall(r'^(else *: *)$', self.getEditorText(), re.M)
    inner_ifs = re.findall(r'^( +if .*: *)$', self.getEditorText(), re.M)
    inner_elifs = re.findall(r'^( +elif .*: *)$', self.getEditorText(), re.M)
    inner_elses = re.findall(r'^( +else *: *)$', self.getEditorText(), re.M)
    self.assertTrue(len(outer_ifs)==0 and len(outer_elifs)==0 and len(outer_elses)==0 and
                    len(inner_ifs)>=1 and len(inner_elifs)>=0 and len(inner_elses)>=0, 
      'Checking if-statements')
    # LOOK FOR for STATEMENTS
    outer_loops = re.findall(r'^(for .* in.*: *)$', self.getEditorText(), re.M)
    inner_loops = re.findall(r'^( +for .* in.*: *)$', self.getEditorText(), re.M)
    self.assertTrue(len(outer_loops)==1 and len(inner_loops)==0, 'Checking for-statements')
   myTests().main()