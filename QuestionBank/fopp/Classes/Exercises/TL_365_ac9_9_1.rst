.. actex:: TL_365_ac9_9_1
   :author: Tyler Luchko
   :difficulty: 1.3900285828
   :basecourse: fopp
   :chapter: Classes
   :subchapter: Exercises
   :topics: Classes/Exercises
   :from_source: F
   :language: python
   :autograde: unittest
   :nocodelens: 
   :available_files: studentdata.txt
   :pct_on_first: 0.0714285714
   :total_students_attempting: 56
   :num_students_correct: 37.0
   :mean_clicks_to_correct: 7.6216216216

   The following sample file called ``studentdata.txt`` contains one
   line for each student in an imaginary class.  The students name is
   the first thing on each line, followed by some exam scores.  The
   number of scores might be different for each student.
   
   .. raw:: html
   
       <pre id="studentdata.txt">
       joe 10 15 20 30 40
       bill 23 16 19 22
       sue 8 22 17 14 32 17 24 21 2 9 11 17
       grace 12 28 21 45 26 10
       john 14 32 25 16 89
       </pre>
   
   Using the text file ``studentdata.txt`` write a program that prints out the names of
   students that have more than six quiz scores.
   ~~~~
   
   # Hint: first see if you can write a program that just prints out the number of scores on each line
   # Then, make it print the number only if the number is at least six
   # Then, switch it to printing the name instead of the number
   
   with open('studentdata.txt', 'r') as fh:
       for line in fh:
           print(line)
   ====
   from unittest.gui import TestCaseGui
   import re
   class myTests(TestCaseGui):
   
      def testOne(self):
          names = []
   with open('studentdata.txt', 'r') as fh:
              for line in fh:
           values = line.split()
    name = values[0]
    scores = values[1:]
    if len(scores) > 6:
        names.append(name)
          self.assertEqual(self.getOutput().rstrip(), '\n'.join(names),
       'Checking names')
   for name in names:
       self.assertFalse(re.search(name, self.getEditorText()), 'Checking for hardcoding')
   if re.search(r'[^#]+= *open', self.getEditorText(), re.M):
       
       self.assertTrue(re.search(r'[^#]+\.close\(', self.getEditorText(), re.M), 'Checking for matching open and close statements')
   else:
       self.assertTrue(re.search(r'with[ (] *open', self.getEditorText(), re.M), 'Checking open statement')
   myTests().main()