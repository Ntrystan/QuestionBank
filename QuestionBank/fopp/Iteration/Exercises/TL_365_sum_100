.. actex:: TL_365_sum_100
   :author: Tyler Luchko
   :difficulty: 1
   :basecourse: fopp
   :topic: Iteration/Exercises
   :from_source: F
   :language: python
   :autograde: unittest
   :pct_on_first: 0.3431372549
   :total_students_attempting: 102
   :num_students_correct: 66.0
   :mean_clicks_to_correct: 2.1212121212

   Compute and output
   
   .. math::
      \sum_{i=0}^{100} i
   
   ~~~~
   
   
   ====
   from unittest.gui import TestCaseGui
   import re
   class myTests(TestCaseGui):
       def testOne(self):
    # check the answer
    self.assertEqual(self.getOutput().rstrip(), '5050', 'Checking answer')
    # hardcode check
    float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'
    print_float_re = r'print\( *'+float_re+' *\)'
    self.assertFalse(re.search(print_float_re, self.getEditorText()), 'Checking for hardcoding')
   
    outer_loops = re.findall(r'^(for .* in.*: *)$', self.getEditorText(), re.M)
    inner_loops = re.findall(r'^( +for .* in.*: *)$', self.getEditorText(), re.M)
    self.assertTrue(len(outer_loops)==1 and len(inner_loops)>=0, 'Checking for-statements')
   myTests().main()