.. activecode:: ac17_6_4
   :author: bmiller
   :difficulty: 3
   :basecourse: fopp
   :topic: NestedData/ChapterAssessment
   :from_source: T
   :language: python
   :autograde: unittest
   :practice: T
   :topics: NestedData/NestedDictionaries
   :pct_on_first: 0.1608391608
   :total_students_attempting: 143
   :num_students_correct: 98.0
   :mean_clicks_to_correct: 3.4897959184

   Provided is a nested data structure. Follow the instructions in the comments below. Do not hard code.
   
   ~~~~
   
   nested = {'data': ['finding', 23, ['exercises', 'hangout', 34]], 'window': ['part', 'whole', [], 'sum', ['math', 'calculus', 'algebra', 'geometry', 'statistics',['physics', 'chemistry', 'biology']]]}
   
   # Check to see if the string 'data' is a key in nested, if it is, assign True to the variable data, otherwise assign False.
   
   # Check to see if the integer 24 is in the value of the key data, if it is then assign to the variable twentyfour the value of True, otherwise False.
   
   # Check to see that the string 'whole' is not in the value of the key window. If it's not, then assign to the variable whole the value of True, otherwise False.
   
   # Check to see if the string 'physics' is a key in the dictionary nested. If it is, assign to the variable physics, the value of True, otherwise False.
   
   =====
   
   from unittest.gui import TestCaseGui
   
   class myTests(TestCaseGui):
   
      def testOne(self):
         self.assertEqual(data, True, "Testing that data has the correct value.")
      def testTwo(self):
         self.assertEqual(twentyfour, False, "Testing that twentyfour has the correct value.")
      def testThree(self):
         self.assertEqual(whole, False, "Testing that whole has the correct value.")
      def testFour(self):
         self.assertEqual(physics, False, "Testing that physics has the correct value.")
   
   myTests().main()