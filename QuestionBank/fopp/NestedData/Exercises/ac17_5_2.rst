.. actex:: ac17_5_2
   :author: bmiller
   :difficulty: 1.5896299977
   :basecourse: fopp
   :chapter: NestedData
   :subchapter: Exercises
   :topics: NestedData/Exercises
   :from_source: T
   :pct_on_first: 0.1300813008
   :total_students_attempting: 123
   :num_students_correct: 97.0
   :mean_clicks_to_correct: 11.0103092784

   The nested dictionary, ``pokemon``, shows the number of various Pokemon that each person has caught while playing Pokemon Go. Find the total number of rattatas, dittos, and pidgeys caught and assign to the variables ``r``, ``d``, and ``p`` respectively. Do not hardcode. Note: Be aware that not every trainer has caught a ditto.
   
   ~~~~
   
   pokemon = {'Trainer1':
             {'normal': {'rattatas':15, 'eevees': 2, 'ditto':1}, 'water': {'magikarps':3}, 'flying': {'zubats':8, 'pidgey': 12}},
             'Trainer2':
             {'normal': {'rattatas':25, 'eevees': 1}, 'water': {'magikarps':7}, 'flying': {'zubats':3, 'pidgey': 15}},
             'Trainer3':
             {'normal': {'rattatas':10, 'eevees': 3, 'ditto':2}, 'water': {'magikarps':2}, 'flying': {'zubats':3, 'pidgey': 20}},
             'Trainer4':
             {'normal': {'rattatas':17, 'eevees': 1}, 'water': {'magikarps':9}, 'flying': {'zubats':12, 'pidgey': 14}}}
   
   
   =====
   
   from unittest.gui import TestCaseGui
   
   class myTests(TestCaseGui):
   
       def testSix(self):
           self.assertEqual(r, 67, "Testing that r is assigned to correct value.")
       def testSixB(self):
           self.assertEqual(d, 3, "Testing that d is assigned to correct value.")
       def testSixC(self):
           self.assertEqual(p, 61, "Testing that p is assigned to correct value.")
   
   myTests().main()