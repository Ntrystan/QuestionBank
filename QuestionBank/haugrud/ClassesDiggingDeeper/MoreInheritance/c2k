.. activecode:: c2k
    :author: jenkins
    :difficulty: 3
    :basecourse: haugrud
    :topic: ClassesDiggingDeeper/MoreInheritance
    :from_source: None

    def gcd(m, n):
        while m % n != 0:
            oldm = m
            oldn = n
            m = oldn
            n = oldm % oldn
        return n

    class Fraction:
        def __init__(self, top, bottom):
            self.num = top        # the numerator is on top
            self.den = bottom     # the denominator is on the bottom

        def __str__(self):
            return str(self.num) + "/" + str(self.den)

    class SFraction(Fraction):
        '''a Fraction in simplest form'''
        def __init__(self, top, bottom):
            common = gcd(top, bottom)
            Fraction.__init__(self, top // common, bottom // common)

    afraction = Fraction(12, 16)
    print(afraction)
    sfraction = SFraction(12, 16)
    print(sfraction)