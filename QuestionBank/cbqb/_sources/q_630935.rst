.. mchoice:: canterburyqb_630935
    :basecourse: canterburyqb
        
    Suppose you are writing software for a helpdesk. Each request is entered into    
    the system as it arrives.    
        
    Which of the following abstract datatypes would be the best choice to store    
    these requests? Be prepared to justify your answer.    
    

    - A Stack    
      

      - B and D are the two best choices. B allows you to handle the requests in the    
        order received; D allows you the flexibility to override that order when    
        needed, by giving certain requests a higher priority.    
            
        E is less good because although you could let a priority be the index into the    
        Dictionary, Dictionaries aren't guaranteed to return items of the same    
        priority in the order they were added to the Dictionary.    
            
        A is wrong, because it would guarantee that the most recent requests are    
        always handled first.    
            
        An argument could be made for C  \-- elements could be added to the list in    
        order of priority, following any other elements with the same priority. The    
        needed operations will likely be less efficient than they would be with a    
        Queue or PriorityQueue, however.
    - A Queue    
      

      - B and D are the two best choices. B allows you to handle the requests in the    
        order received; D allows you the flexibility to override that order when    
        needed, by giving certain requests a higher priority.    
            
        E is less good because although you could let a priority be the index into the    
        Dictionary, Dictionaries aren't guaranteed to return items of the same    
        priority in the order they were added to the Dictionary.    
            
        A is wrong, because it would guarantee that the most recent requests are    
        always handled first.    
            
        An argument could be made for C  \-- elements could be added to the list in    
        order of priority, following any other elements with the same priority. The    
        needed operations will likely be less efficient than they would be with a    
        Queue or PriorityQueue, however.
    - An OrderedList    
      

      - B and D are the two best choices. B allows you to handle the requests in the    
        order received; D allows you the flexibility to override that order when    
        needed, by giving certain requests a higher priority.    
            
        E is less good because although you could let a priority be the index into the    
        Dictionary, Dictionaries aren't guaranteed to return items of the same    
        priority in the order they were added to the Dictionary.    
            
        A is wrong, because it would guarantee that the most recent requests are    
        always handled first.    
            
        An argument could be made for C  \-- elements could be added to the list in    
        order of priority, following any other elements with the same priority. The    
        needed operations will likely be less efficient than they would be with a    
        Queue or PriorityQueue, however.
    - A PriorityQueue    
      

      + Correct!
    - A Dictionary    
      

      - B and D are the two best choices. B allows you to handle the requests in the    
        order received; D allows you the flexibility to override that order when    
        needed, by giving certain requests a higher priority.    
            
        E is less good because although you could let a priority be the index into the    
        Dictionary, Dictionaries aren't guaranteed to return items of the same    
        priority in the order they were added to the Dictionary.    
            
        A is wrong, because it would guarantee that the most recent requests are    
        always handled first.    
            
        An argument could be made for C  \-- elements could be added to the list in    
        order of priority, following any other elements with the same priority. The    
        needed operations will likely be less efficient than they would be with a    
        Queue or PriorityQueue, however.
