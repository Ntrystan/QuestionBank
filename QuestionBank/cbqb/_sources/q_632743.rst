.. mchoice:: canterburyqb_632743
    :basecourse: canterburyqb
        
    The following is a skeleton for a method called "minVal":      
        
    ``public static int minVal(int[] y, int first, int last) {``    
        
    .. code-block::    
        
        
           /* This method returns the value of the minimum element in the    
           * subsection of the array "y", starting at position    
           * "first" and ending at position "last".    
           */    
        
             int bestSoFar = y[first];    
        
    ``xxx missing for loop goes here``      
        
    ``return bestSoFar;``      
        
    ``} // method minVal``      
        
    In this question, the missing "for" loop is to run "forwards". That is, the    
    code should search the array from the low subscripts to the high subscripts.    
    Given that, the correct code for the missing "for" loop is:    
    

    - [code]    
          
      .. code-block::    
          
         for (int i=last; i>first; i--) {    
             if ( y[i] < bestSoFar ) {    
                bestSoFar = y[i];    
             } // if    
         } // for    
          
          
      ```    
      

      - a)      
        INCORRECT      
        The loop starts at last ... This loop is not running backwards.      
              
        b)      
        INCORRECT:      
        if  ( y[i] > y[bestSoFar] ) ... bestSoFar is storing a value, not a position.    
        In any event, this if condition is searching for the maximum value.      
              
        c)      
        INCORRECT:      
        The loop starts at last ... This loop is not running backwards.      
        if  ( y[i] > y[bestSoFar] ) ... bestSoFar is storing a value, not a position.    
        In any event, this if condition is searching for the maximum value.      
        bestSoFar = i; ... bestsoFar is being set to the position, not the value.      
              
        d)      
        INCORRECT:      
        The loop starts at last ... This loop is not running backwards.      
        if ( bestSoFar < y[i] ) ... this if condition is searching for the maximum    
        value.      
        bestSoFar = i; ... bestsoFar is being set to the position, not the value.      
              
        e)      
        CORRECT!
    - [code]    
          
      .. code-block::    
          
         for (int i=first+1; i<=last; i++) {    
             if ( y[i] > y[bestSoFar] ) {    
                bestSoFar = y[i];    
             } // if    
         } // for    
          
          
      ```    
      

      - a)      
        INCORRECT      
        The loop starts at last ... This loop is not running backwards.      
              
        b)      
        INCORRECT:      
        if  ( y[i] > y[bestSoFar] ) ... bestSoFar is storing a value, not a position.    
        In any event, this if condition is searching for the maximum value.      
              
        c)      
        INCORRECT:      
        The loop starts at last ... This loop is not running backwards.      
        if  ( y[i] > y[bestSoFar] ) ... bestSoFar is storing a value, not a position.    
        In any event, this if condition is searching for the maximum value.      
        bestSoFar = i; ... bestsoFar is being set to the position, not the value.      
              
        d)      
        INCORRECT:      
        The loop starts at last ... This loop is not running backwards.      
        if ( bestSoFar < y[i] ) ... this if condition is searching for the maximum    
        value.      
        bestSoFar = i; ... bestsoFar is being set to the position, not the value.      
              
        e)      
        CORRECT!
    - [code]    
          
      .. code-block::    
          
         for (int i=last; i>first; i--) {    
             if ( y[i] > y[bestSoFar] ) {    
                bestSoFar = i;    
             } // if    
         } // for    
          
          
      ```    
      

      - a)      
        INCORRECT      
        The loop starts at last ... This loop is not running backwards.      
              
        b)      
        INCORRECT:      
        if  ( y[i] > y[bestSoFar] ) ... bestSoFar is storing a value, not a position.    
        In any event, this if condition is searching for the maximum value.      
              
        c)      
        INCORRECT:      
        The loop starts at last ... This loop is not running backwards.      
        if  ( y[i] > y[bestSoFar] ) ... bestSoFar is storing a value, not a position.    
        In any event, this if condition is searching for the maximum value.      
        bestSoFar = i; ... bestsoFar is being set to the position, not the value.      
              
        d)      
        INCORRECT:      
        The loop starts at last ... This loop is not running backwards.      
        if ( bestSoFar < y[i] ) ... this if condition is searching for the maximum    
        value.      
        bestSoFar = i; ... bestsoFar is being set to the position, not the value.      
              
        e)      
        CORRECT!
    - [code]    
          
      .. code-block::    
          
         for (int i=last; i>first; i--) {    
             if ( bestSoFar < y[i] ) {    
                bestSoFar = i    
             } // if    
         } // for    
          
          
      ```    
      

      - a)      
        INCORRECT      
        The loop starts at last ... This loop is not running backwards.      
              
        b)      
        INCORRECT:      
        if  ( y[i] > y[bestSoFar] ) ... bestSoFar is storing a value, not a position.    
        In any event, this if condition is searching for the maximum value.      
              
        c)      
        INCORRECT:      
        The loop starts at last ... This loop is not running backwards.      
        if  ( y[i] > y[bestSoFar] ) ... bestSoFar is storing a value, not a position.    
        In any event, this if condition is searching for the maximum value.      
        bestSoFar = i; ... bestsoFar is being set to the position, not the value.      
              
        d)      
        INCORRECT:      
        The loop starts at last ... This loop is not running backwards.      
        if ( bestSoFar < y[i] ) ... this if condition is searching for the maximum    
        value.      
        bestSoFar = i; ... bestsoFar is being set to the position, not the value.      
              
        e)      
        CORRECT!
    - [code]    
          
      .. code-block::    
          
         for (int i=first+1; i<=last; i++) {    
             if ( y[i] < bestSoFar ) {    
                bestSoFar = y[i];    
             } // if    
         } // for    
          
          
      ```    
      

      + Correct!
