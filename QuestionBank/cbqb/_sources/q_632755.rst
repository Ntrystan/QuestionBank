.. mchoice:: canterburyqb_632755
    :basecourse: canterburyqb
        
    The following is a skeleton for a method called "maxVal":    
        
    .. code-block::    
        
        
           public static int maxVal(int[] y, int first, int last) {    
           /* This method returns the value of the maximum element in the    
           * subsection of the array "y", starting at position    
           * "first" and ending at position "last".    
           */    
        
             int bestSoFar = y[first];    
        
             xxx missing for loop goes here    
        
             return bestSoFar;    
        
           } // method maxVal    
        
    In this question, the missing "for" loop is to run "backwards". That is, the    
    code should search the array from the high subscripts to the low subscripts.    
    Given that, the correct code for the missing "for" loop is:    
    

    - [code]    
          
      .. code-block::    
          
         for (int i=last; i>first; i--) {    
             if ( y[i] < bestSoFar ) {    
                bestSoFar = y[i];    
             } // if    
         } // for    
          
          
      ```    
      

      - a)    
            
        INCORRECT:    
            
        if (y[i] < y[bestSoFar]) ... This is setting bestSoFar to the value of the    
        SMALLEST number so far.    
            
        b)    
            
        INCORRECT:    
            
        The loop starts at first+1 ... This loop is not running backwards.    
            
        [code]    
            
            if  ( y[i] > y[bestSoFar] ) ... bestSoFar is storing a value, not a position.       
                
                
        [/code]    
            
            
            
        c)    
            
        INCORRECT    
            
        [code]    
            
            bestSoFar = i; ... bestsoFar is being set to the position, not the value.     
                
                
        [/code]    
            
            
            
        d)    
            
        CORRECT!    
            
        e)    
            
        INCORRECT:    
            
        The loop starts at first+1 ... This loop is not running backwards.    
            
        [code]    
            
            bestSoFar = i; ... bestsoFar is being set to the position, not the value.     
                
                
        [/code]
    - [code]    
          
      .. code-block::    
          
         for (int i=first+1; i<=last; i++) {    
             if ( y[i] > y[bestSoFar] ) {    
                bestSoFar = y[i];    
             } // if    
         } // for    
          
          
      ```    
      

      - a)    
            
        INCORRECT:    
            
        if (y[i] < y[bestSoFar]) ... This is setting bestSoFar to the value of the    
        SMALLEST number so far.    
            
        b)    
            
        INCORRECT:    
            
        The loop starts at first+1 ... This loop is not running backwards.    
            
        [code]    
            
            if  ( y[i] > y[bestSoFar] ) ... bestSoFar is storing a value, not a position.       
                
                
        [/code]    
            
            
            
        c)    
            
        INCORRECT    
            
        [code]    
            
            bestSoFar = i; ... bestsoFar is being set to the position, not the value.     
                
                
        [/code]    
            
            
            
        d)    
            
        CORRECT!    
            
        e)    
            
        INCORRECT:    
            
        The loop starts at first+1 ... This loop is not running backwards.    
            
        [code]    
            
            bestSoFar = i; ... bestsoFar is being set to the position, not the value.     
                
                
        [/code]
    - [code]    
          
      .. code-block::    
          
         for (int i=last; i>first; i--) {    
             if ( y[i] > y[bestSoFar] ) {    
                bestSoFar = i;    
             } // if    
         } // for    
          
          
      ```    
      

      - a)    
            
        INCORRECT:    
            
        if (y[i] < y[bestSoFar]) ... This is setting bestSoFar to the value of the    
        SMALLEST number so far.    
            
        b)    
            
        INCORRECT:    
            
        The loop starts at first+1 ... This loop is not running backwards.    
            
        [code]    
            
            if  ( y[i] > y[bestSoFar] ) ... bestSoFar is storing a value, not a position.       
                
                
        [/code]    
            
            
            
        c)    
            
        INCORRECT    
            
        [code]    
            
            bestSoFar = i; ... bestsoFar is being set to the position, not the value.     
                
                
        [/code]    
            
            
            
        d)    
            
        CORRECT!    
            
        e)    
            
        INCORRECT:    
            
        The loop starts at first+1 ... This loop is not running backwards.    
            
        [code]    
            
            bestSoFar = i; ... bestsoFar is being set to the position, not the value.     
                
                
        [/code]
    - .. role:: raw-html-m2r(raw)    
         :format: html    
          
          
      ``for (int i=last; i>first; i--) {``    
          
      :raw-html-m2r:`<code class="docutils literal"><span class="pre">if ( bestSoFar < &#96;&#96;&#96;y[i]</span></code>`\ ) {`    
          
      .. code-block::    
          
          
                    bestSoFar = y[i]        
                 } // if    
             } // for    
      

      + Correct!
    - [code]    
          
      .. code-block::    
          
         for (int i=first+1; i<=last; i++) {    
             if ( y[i] > bestSoFar ) {    
                bestSoFar = i;    
             } // if    
         } // for    
          
          
      ```    
      

      - a)    
            
        INCORRECT:    
            
        if (y[i] < y[bestSoFar]) ... This is setting bestSoFar to the value of the    
        SMALLEST number so far.    
            
        b)    
            
        INCORRECT:    
            
        The loop starts at first+1 ... This loop is not running backwards.    
            
        [code]    
            
            if  ( y[i] > y[bestSoFar] ) ... bestSoFar is storing a value, not a position.       
                
                
        [/code]    
            
            
            
        c)    
            
        INCORRECT    
            
        [code]    
            
            bestSoFar = i; ... bestsoFar is being set to the position, not the value.     
                
                
        [/code]    
            
            
            
        d)    
            
        CORRECT!    
            
        e)    
            
        INCORRECT:    
            
        The loop starts at first+1 ... This loop is not running backwards.    
            
        [code]    
            
            bestSoFar = i; ... bestsoFar is being set to the position, not the value.     
                
                
        [/code]
