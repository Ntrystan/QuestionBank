.. mchoice:: canterburyqb_635027
    :basecourse: canterburyqb
        
    The following method, called ``maxRow()``\ , is intended to take one parameter: a    
    ``List`` where the elements are ``List``\ s of ``Integer`` objects. You can think of    
    this parameter as a matrix--a list of rows, where each row is a list of    
    "cells" (plain integers). The method sums up the integers in each row (each    
    inner list), and returns the index (row number) of the row with the largest    
    row sum. Choose the best choice to fill in the blank on **Line 7**  so that    
    this method works as intended:    
        
    .. code-block::    
        
        
           public static int maxRow(List<List<Integer>> matrix)    
           {    
               int maxVec = -1;                                // Line 1    
               int maxSum = Integer.MIN_VALUE;                 // Line 2    
        
               for (int row = 0; row < __________; row++)      // Line 3    
               {    
                   int sum = 0;                                // Line 4    
                   for (int col = 0; col < __________; col++)  // Line 5    
                   {    
                       sum = sum + __________;                 // Line 6    
                   }    
                   if (___________)                            // Line 7    
                   {    
                       maxSum = __________;                    // Line 8    
                       maxVec = __________;                    // Line 9    
                   }    
               }    
               return maxVec;                                  // Line 10    
           }    
    

    - ``sum > matrix.size()``    
      

      - The local variable `sum` represents the sum of all cell values in the current    
        row, which is computed by the inner loop in the code.  The if test on Line 6    
        checks whether to update the local variables `maxSum` and `maxVec`, which    
        represent information about the largest row sum found so far.  This should    
        happen when `sum > maxSum`.
    - ``sum < maxSum``    
      

      - The local variable `sum` represents the sum of all cell values in the current    
        row, which is computed by the inner loop in the code.  The if test on Line 6    
        checks whether to update the local variables `maxSum` and `maxVec`, which    
        represent information about the largest row sum found so far.  This should    
        happen when `sum > maxSum`.
    - ``sum <= maxSum``    
      

      - The local variable `sum` represents the sum of all cell values in the current    
        row, which is computed by the inner loop in the code.  The if test on Line 6    
        checks whether to update the local variables `maxSum` and `maxVec`, which    
        represent information about the largest row sum found so far.  This should    
        happen when `sum > maxSum`.
    - ``sum > maxSum``    
      

      + Correct!
    - ``sum > matrix.get(row).size()``    
      

      - The local variable `sum` represents the sum of all cell values in the current    
        row, which is computed by the inner loop in the code.  The if test on Line 6    
        checks whether to update the local variables `maxSum` and `maxVec`, which    
        represent information about the largest row sum found so far.  This should    
        happen when `sum > maxSum`.
