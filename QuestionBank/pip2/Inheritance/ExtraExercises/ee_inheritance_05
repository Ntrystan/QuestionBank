.. activecode:: ee_inheritance_05
   :author: Brad Miller
   :difficulty: 3
   :basecourse: pip2
   :topic: Inheritance/ExtraExercises
   :from_source: None
   :tags:Inheritance/inheritVarsAndMethods.rst

   class Pokemon():
       attack = 12
       defense = 10
       health = 15

       def __init__(self, name,level = 5):
           self.name = name
           self.p_type = "Normal"
           self.level = level
           self.weak = "Normal"
           self.strong = "Normal"

       def train(self):
           self.update()
           self.attack_up()
           self.defense_up()
           self.health_up()
           self.level = self.level + 1
           if self.level%self.evolve == 0:
               return self.level, "Evolved!"
           else:
               return self.level

       def attack_up(self):
           self.attack = self.attack + self.attack_boost
           return self.attack

       def defense_up(self):
           self.defense = self.defense + self.defense_boost
           return self.defense

       def health_up(self):
           self.health = self.health + self.health_boost
           return self.health

       def update(self):
           self.health_boost = 5
           self.attack_boost = 3
           self.defense_boost = 2
           self.evolve = 10

       def __str__(self):
           self.update()
           return "Pokemon name: {}, Type: {}, Level: {}".format(self.name, self.p_type, self.level)

       def opponent(self):
           self.update()
           if self.p_type == "Grass":
               self.weak = "fire"
               self.strong = "water"
           elif self.p_type == "Ghost":
               self.weak = "dark"
               self.strong = "psychic"
           elif self.p_type == "Fire":
               self.weak = "water"
               self.strong = "grass"
           elif self.p_type == "Flying":
               self.weak = "electric"
               self.strong = "fighting"
           return self.weak, self.strong

   class Grass_Pokemon(Pokemon):
       attack = 15
       defense = 14
       health = 12

       def update(self):
           self.health_boost = 6
           self.attack_boost = 2
           self.defense_boost = 3
           self.evolve = 12
           self.p_type = "Grass"

   class Ghost_Pokemon(Pokemon):

       def update(self):
           self.health_boost = 3
           self.attack_boost = 4
           self.defense_boost = 3
           self.p_type = "Ghost"

   class Fire_Pokemon(Pokemon):

       def update(self):
           Pokemon.update(self)
           self.p_type = "Fire"

   class Flying_Pokemon(Pokemon):
       def update(self):
           Pokemon.update(self)
           self.p_type = "Flying"

   =====

   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):

      def testOneA(self):
         self.assertEqual(Grass_Pokemon("Buggy").opponent(), ("fire", "water"), "Testing that Grass weak and strong are assigned to correct values.")
      def testOneB(self):
         self.assertEqual(Fire_Pokemon("Buggy").opponent(), ("water", "grass"), "Testing that Fire weak and strong are assigned to correct values.")
      def testOneC(self):
         self.assertEqual(Ghost_Pokemon("Buggy").opponent(), ("dark", "psychic"), "Testing that Ghost weak and strong are assigned to correct values.")
      def testOneD(self):
         self.assertEqual(Flying_Pokemon("Buggy").opponent(), ("electric", "fighting"), "Testing that Flying weak and strong are assigned to correct values.")

   myTests().main()