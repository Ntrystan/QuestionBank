.. mchoice:: 5.6.2
  :author: bmiller
  :difficulty: 3
  :basecourse: learnwebgl2
  :topic: 05_rendering/06_one_color_per_triangle
  :from_source: T
  :random:
  :answer_a: Because the graphics pipeline processes vertices, and all data must be store in a per-vertex order.
  :answer_b: Because three is the magic number for all vertex data.
  :answer_c: Because both object-buffers for the pyramid model are required to have the same number of floats.
  :answer_d: Because GPU memory is cheap and we can waste it without worry.
  :correct: a
  :feedback_a: Correct. The color values in the color object-buffer must match up one-to-one with the vertex data.
  :feedback_b: Incorrect. Three has no special meaning in WebGL programming.
  :feedback_c: Incorrect. They are required to represent the same number of vertices, but the number of floats can be different. Notice that the vertex object-buffer holds 36 floats, while the color object-buffer holds 48 floats.
  :feedback_d: Incorrect. GPU memory tends to be large, but still a limited resource.

  The second WebGL example program in this lesson stores a RGBA color value for each vertex of the model. The data
  for rendering the pyramid looks like the 1D array of values below. Why are the four color values for the four
  triangles each stored 3 times?

  .. Code-block:: JavaScript

    // The color-per-vertex array
    [ 1,0,0,1,  1,0,0,1,  1,0,0,1,
      0,1,0,1,  0,1,0,1,  0,1,0,1,
      0,0,1,1,  0,0,1,1,  0,0,1,1,
      1,0,1,1,  1,0,1,1,  1,0,1,1 ]