.. actex:: ex_6_10
   :author: jenkins
   :difficulty: 3
   :basecourse: cps110fall2018
   :topic: Selection/Exercises
   :from_source: None
   :nocodelens:

   Write a function ``is_rightangled`` which, given the length of three sides of a triangle,
   will determine whether the triangle is right-angled.  Assume that the third argument to the
   function is always the longest side.  It will return ``True`` if the triangle
   is right-angled, or ``False`` otherwise.

   Hint: floating point arithmetic is not always exactly accurate,
   so it is not safe to test floating point numbers for equality.
   If a good programmer wants to know whether
   ``x`` is equal or close enough to ``y``, they would probably code it up as

   .. sourcecode:: python

      if  abs(x - y) < 0.001:      # if x is approximately equal to y
          ...
   ~~~~
   def is_rightangled(a, b, c):
       # your code here

   ====
   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):
       def testOne(self):
           self.assertEqual(is_rightangled(1.5,2.0,2.5),True,"Tested is_rightangled on inputs of 1.5, 2.0 and 2.5")
           self.assertEqual(is_rightangled(4.0,8.0,16.0),False,"Tested is_rightangled on inputs of 4.0, 8.0 and 16.0")
           self.assertEqual(is_rightangled(4.1,8.2,9.1678787077),True,"Tested is_rightangled on inputs of 4.1, 8.2 and 9.1678787077")
           self.assertEqual(is_rightangled(4.1,8.2,9.16787),True,"Tested is_rightangled on inputs of 4.1, 8.2, and 9.16787")
           self.assertEqual(is_rightangled(4.1,8.2,9.168),False,"Tested is_rightangled on inputs of 4.1, 8.2 and 9.168")
           self.assertEqual(is_rightangled(0.5,0.4,0.64031),True,"Tested is_rightangled on inputs of 0.5, 0.4 and 0.64031")

   myTests().main()