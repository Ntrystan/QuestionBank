.. activecode:: lhs_7_9
    :author: LHS CS Team
    :difficulty: 0
    :basecourse: thinkcspy
    :topic: Selection/Exercises
    :from_source: F
    :language: python
    :autograde: unittest
    :pct_on_first: 0.4019607843
    :total_students_attempting: 408
    :num_students_correct: 402.0
    :mean_clicks_to_correct: 3.6194029851

    Write a function ``winnerRPS(you, me)`` that determines the winner in a Rock, Paper, Scissor game
    
    ``you`` and ``me`` are strings which have values of either ``rock``, ``paper`` or ``scissor``
    
    Return a 1 if ``me`` wins
    
    Return a -1 if ``you`` wins
    
    Return a 0 if there is a tie
    
    See https://en.wikipedia.org/wiki/Rock%E2%80%93paper%E2%80%93scissors if you are unfamiliar with the game
    
    ~~~~
    # Name:
    
    def winnerRPS(me, you):
        '''determines the winner of a rock, paper, scissor game
           return 1 if 'me' wins
           return -1 if 'you' wins
           return 0 if there is a tie
           Assume that 'me' and 'you' are strings of values 'rock', 'paper' or 'scissor'
        '''
        return(0) # replace this
    
    def main():
        print(winnerRPS("rock", "paper"))
        print(winnerRPS("rock", "rock"))    
        print(winnerRPS("paper", "scissor"))
        print(winnerRPS( ..., ... ) # now add your own to test it more...
    
    if __name__ == "__main__":
        main()
    
    ====
    import re
    from unittest.gui import TestCaseGui
            
    class myTests(TestCaseGui):
                 
        def golden_RPS(self, me, you):
            if me == 'rock':
                if you == 'rock':
                    return(0)
                elif you == 'paper':
                    return(-1)
                else:
                    return(1)
            elif me == 'paper':
                if you == 'rock':
                    return(1)
                elif you == 'paper':
                    return(0)
                else:
                    return(-1)
            else:  #scissor
                if you == 'rock':
                    return(-1)
                elif you == 'paper':
                    return(1)
                else:
                    return(0)
                
        def testOne(self):
            print("Auto-testing...")
            self.assertEqual(winnerRPS('rock', 'scissor'), self.golden_RPS('rock', 'scissor'), "rock scissor")
            self.assertEqual(winnerRPS('rock', 'paper'), self.golden_RPS('rock', 'paper'), "rock paper")
            self.assertEqual(winnerRPS('rock', 'rock'), self.golden_RPS('rock', 'rock'), "rock rock")
            self.assertEqual(winnerRPS('paper', 'scissor'), self.golden_RPS('paper', 'scissor'), "paper scissor")
            self.assertEqual(winnerRPS('paper', 'paper'), self.golden_RPS('paper', 'paper'), "paper paper")
            self.assertEqual(winnerRPS('paper', 'rock'), self.golden_RPS('paper', 'rock'), "paper rock")
            self.assertEqual(winnerRPS('scissor', 'scissor'), self.golden_RPS('scissor', 'scissor'), "scissor scissor")
            self.assertEqual(winnerRPS('scissor', 'rock'), self.golden_RPS('scissor', 'rock'), "scissor rock")
            self.assertEqual(winnerRPS('scissor', 'paper'), self.golden_RPS('scissor', 'paper'), "scissor paper")
            
    myTests().main()