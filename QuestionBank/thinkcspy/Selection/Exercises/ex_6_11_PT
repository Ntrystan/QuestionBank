.. actex:: ex_6_11_PT
    :author: pranoj thapa
    :difficulty: 0
    :basecourse: thinkcspy
    :topic: Selection/Exercises
    :from_source: F
    :practice: T
    :autograde: unittest
    :nocodelens: 
    :pct_on_first: 1.0
    :total_students_attempting: 1
    :num_students_correct: 1.0
    :mean_clicks_to_correct: 1.0

    Extend the above program so that the sides can be given to the function in any order.
    ~~~~
    
    def is_rightangled(a, b, c):
        # your code here
    
    
    ====
    from unittest.gui import TestCaseGui
    
    class myTests(TestCaseGui):
        def testOne(self):
            self.assertEqual(is_rightangled(1.5,2.5,2.0),True,"Tested is_rightangled on inputs of 1.5, 2.5 and 2.0")
            self.assertEqual(is_rightangled(16.0,4.0,8.0),False,"Tested is_rightangled on inputs of 16.0, 4.0 and 8.0")
            self.assertEqual(is_rightangled(4.1,8.2,9.1678787077),True,"Tested is_rightangled on inputs of 4.1, 8.2 and 9.1678787077")
            self.assertEqual(is_rightangled(4.1,9.16787,8.2),True,"Tested is_rightangled on inputs of 4.1, 9.16787 and 8.2")
            self.assertEqual(is_rightangled(4.1,8.2,9.168),False,"Tested is_rightangled on inputs of 4.1, 8.2 and 9.168")
            self.assertEqual(is_rightangled(0.5,0.64031,0.4),True,"Tested is_rightangled on inputs of 0.5, 0.64031 and 0.4")
            self.assertEqual(is_rightangled(3,4,5),True,"Tested is_rightangled on inputs of 3, 4 and 5")
            self.assertEqual(is_rightangled(3.5,4.5,5),False,"Tested is_rightangled on inputs of 3.5, 4.5 and 5")
            self.assertEqual(is_rightangled(-6,8,10),True,"Tested is_rightangled on inputs of -6, 8 and 10")
    
    myTests().main()