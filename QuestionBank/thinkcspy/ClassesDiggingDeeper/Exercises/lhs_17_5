.. activecode:: lhs_17_5
    :author: LHS CS Team
    :difficulty: 0
    :basecourse: thinkcspy
    :topic: ClassesDiggingDeeper/Exercises
    :from_source: F
    :language: python
    :autograde: unittest
    :pct_on_first: 0.4175257732
    :total_students_attempting: 388
    :num_students_correct: 384.0
    :mean_clicks_to_correct: 3.5703125

    Add a multiplication method (__mul__) to the Fraction class so that it
    will be able to use the ``*`` operator to multiply two Fractions. This
    method should return a simplified Fraction the is the product of the
    two fractions.
    
    The Fraction class has already been supplied - based on the one that was
    in the reading. You just need to add the new ``__mul__`` method and test it out.
    
    **Hint**: See the ``__add__`` method as an example.
    
    ~~~~
    import test
    
    def gcd(m, n):
        while m % n != 0:
            oldm = m
            oldn = n
    
            m = oldn
            n = oldm % oldn
    
        return n
    
    class Fraction:
    
        def __init__(self, top, bottom):
    
            self.num = top        # the numerator is on top
            self.den = bottom     # the denominator is on the bottom
    
        def __str__(self):
            return str(self.num) + "/" + str(self.den)
    
        def simplify(self):
            common = gcd(self.num, self.den)
    
            self.num = self.num // common
            self.den = self.den // common
    
        def __add__(self,otherfraction):
    
            newnum = self.num*otherfraction.den + self.den*otherfraction.num
            newden = self.den * otherfraction.den
            
            f = Fraction(newnum, newden)
            f.simplify()
            return( f )
    
        def __mul__ (self, f):
            # Add the method for *
    
    # Example test case
    f1 = Fraction(6,5)
    f2 = Fraction(5,14)
    f3 = f1 * f2
    print(f3)
    test.testEqual(f3.__str__(), Fraction(3, 7).__str__())
    
    ====
    
    from unittest.gui import TestCaseGui
    
    class myTests(TestCaseGui):
        def testOne(self):
            SelfTest = False
            if (SelfTest):
                self.assertEqual(0,1,"Auto-testing if OFF - you must check the program yourself for now")
                return
            
            print("Auto-Testing...")
            tests = [ ( (4, 5), (5, 2), (2, 1) ),
                      ( (24, 17), (17, 72), (1, 3) ),
                      ( (-3, 1), (6, 2), (-9, 1) )
                     ]
    
            num=0
            for (t) in tests:
                f = Fraction(t[0][0], t[0][1]) * Fraction(t[1][0], t[1][1])
                self.assertEqual(f.__str__(), Fraction(t[2][0], t[2][1]).__str__(), 'test case ' + str(num))
                num += 1
                
    myTests().main()