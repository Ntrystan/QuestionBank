.. activecode:: lhs_17_6
    :author: LHS CS Team
    :difficulty: 0.0
    :basecourse: thinkcspy
    :chapter: ClassesDiggingDeeper
    :subchapter: Exercises
    :topics: ClassesDiggingDeeper/Exercises
    :from_source: F
    :language: python
    :autograde: unittest
    :pct_on_first: 0.496124031
    :total_students_attempting: 387
    :num_students_correct: 383.0
    :mean_clicks_to_correct: 3.4020887728

    Add a division method (__div__) to the Fraction class so that it
    will be able to use the ``/`` operator to divide two Fractions. This
    method should return a simplified Fraction that is the division of the
    two fractions.
    
    Use the Fraction class that you have already created.
    
    ~~~~
    import test
    
    def gcd(m, n):
        while m % n != 0:
            oldm = m
            oldn = n
    
            m = oldn
            n = oldm % oldn
    
        return n
    
    class Fraction:
    
        def __init__(self, top, bottom):
    
            self.num = top        # the numerator is on top
            self.den = bottom     # the denominator is on the bottom
    
        def __str__(self):
            return str(self.num) + "/" + str(self.den)
    
        def simplify(self):
            common = gcd(self.num, self.den)
    
            self.num = self.num // common
            self.den = self.den // common
    
        def __add__(self,otherfraction):
    
            newnum = self.num*otherfraction.den + self.den*otherfraction.num
            newden = self.den * otherfraction.den
            
            f = Fraction(newnum, newden)
            f.simplify()
            return( f )
    
        def __div__ (.......):
            '''
            Implementation for / operator
            '''
    
    # Make test cases here
    
    ====
    
    from unittest.gui import TestCaseGui
    
    class myTests(TestCaseGui):
        def testOne(self):
            SelfTest = False
            if (SelfTest):
                self.assertEqual(0,1,"Auto-testing if OFF - you must check the program yourself for now")
                return
            
            print("Auto-Testing...")
            tests = [ ( (4, 5), (2, 5), (2, 1) ),
                      ( (24, 17), (72, 17), (1, 3) ),
                      ( (-3, 1), (2, 6), (-9, 1) )
                     ]
    
            num=0
            for (t) in tests:
                f = Fraction(t[0][0], t[0][1]) / Fraction(t[1][0], t[1][1])
                self.assertEqual(f.__str__(), Fraction(t[2][0], t[2][1]).__str__(), 'test case ' + str(num))
                num += 1
                
    myTests().main()