.. activecode:: lhs_12_17
    :author: LHS CS Team
    :difficulty: 0.0
    :basecourse: thinkcspy
    :chapter: Dictionaries
    :subchapter: Exercises
    :topics: Dictionaries/Exercises
    :from_source: F
    :language: python
    :autograde: unittest
    :pct_on_first: 0.025974026
    :total_students_attempting: 154
    :num_students_correct: 61.0
    :mean_clicks_to_correct: 21.2459016393

    Dice Odds
    
    There are 36 possible combinations of two dice. A simple pair of loops over
    range(6)+1 will enumerate all combinations. The sum of the two dice is more interesting
    than the actual combination. First, create a function ``diceCombo`` that returns a
    dictionary of all combinations, using the sum of the two dice as the key. Each value in
    the dictionary should be a list of tuples; each tuple has the value of the two dice.
    
    Next, create a function ``diceOdds(diceCombo)`` that takes a dictionary of all combinations
    as a parameter and returns a dictionary of the odds of a particular roll of a pair of dice with
    the sum of the two dice as the key.
    
    The general outline is something like the following:
    
    ::
    
        diceCombo:
        d = {}
        Loop with d1 from 1 to 6
            Loop with d2 from 1 to 6
                newTuple <- ( d1, d2 ) # create the tuple
                oldList <- dictionary entry for sum d1+d2
                newList <- oldList + newTuple
                replace entry in dictionary with newList
    
        diceOdds:
        odds = {}
        Loop over all values in the diceCombo dictionary
            set the key to the diceCombo dictionary key and the value to (length of the list)/36
    
    ~~~~
        
    def diceCombo():
        # your code here
    
    def diceOdds(diceComboDict):
        # your code here
    
    def main():
        # your test code here
    
    if __name__ == "__main__":
        main()
        
    ====
    from unittest.gui import TestCaseGui
    
    class myTests(TestCaseGui):
        def _diceCombo(self):
            dict = {}
            for d1 in range(1, 7):
                for d2 in range(1, 7):
                    sum = d1 + d2
                    d1d2Tuple = (d1, d2)
                    newList = dict.get(sum, [])
                    newList.append(d1d2Tuple)
                    dict[sum] = newList
            return dict
    
        def _diceOdds(self, diceComboDict):
            odds = {}
            for aKey in diceComboDict.keys():
                odds[aKey] = len(diceComboDict[aKey])/36
            return odds
    
        def testOne(self):
            SelfTest = False
            if (SelfTest):
                self.assertEqual(0,1,"Auto-testing if OFF - you must check the program yourself for now")
                return
    
            print('Auto-testing...')
    
            d = self._diceCombo()
            expected = d
            actual = diceCombo()
            self.assertEqual(actual, expected, "Testing that diceCombo returns the correct dictionary.")
        
            expected = self._diceOdds(d)
            actual = diceOdds(d)
            self.assertEqual(actual, expected, "Testing that diceOdds returns the correct dictionary.")
    
    myTests().main()