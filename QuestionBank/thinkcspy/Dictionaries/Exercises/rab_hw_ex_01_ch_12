.. actex:: rab_hw_ex_01_ch_12
   :author: Richard Bernatz
   :difficulty: 0
   :basecourse: thinkcspy
   :topic: Dictionaries/Exercises
   :from_source: F
   :nocodelens:

   Two functions will be written in this exercise. The first is called ```make_dictionary(l1, l2)``` that takes two equal-length lists of single-character strings. It creates and returns a dictionary using the elements of l1 as keys and the elements of l2 as values. The dictionary is then used by a function called ```cipher(s, d)```. The parameter ```s``` is a string and ```d``` is the dictionary created by ```make_dictionary```. Function ```cipher(s, d)``` uses dictionary ```d``` to replace characters in ```s``` that are keys in ```d``` with the corresponding key value. Characters in ```s``` that are not dictionary keys are left unchanged in the ciphered version of the string ```s```. The ciphered word is returned. 
   

   ~~~~
   def make_dictionary(l1, l2):
       # your code here
       
       
   def cipher(s, d):
       # your code here

   ====
   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):
       def testOne(self):
           l1 = ['b', 'f', 'j', 'o', 'z']
           l2 = ['!', '@', '#', '&', '%']
           d = make_dictionary(l1, l2)
           nw = cipher('boyz', d)
           self.assertEqual(nw, '!&y%', "Tested boyz == !&y%")
           nw = cipher('jack in the box', d)
           self.assertEqual(nw, '#ack in the !&x' ,"Tested jack in the box == #ack in the !&x")          

   myTests().main()