.. activecode:: 1306_cw8_s20_q3a
    :author: Mohammad Rajiur Rahman
    :difficulty: 0
    :basecourse: thinkcspy
    :topic: Lists/Exercises
    :from_source: F
    :autograde: unittest


    **Question 3A [15 points]** 
     
    Write a function ``FindClosest(intlist, key)`` that takes an integer ``key``, and a ``list`` of integers as a parameter, and returns a list containing all locations in ``intlist`` where the value is equal to the ``key``.

    For example, if ``intlist = [2,1,5,6,2,3,1,3]``

    1. ``FindClosest(intlist, 1)`` will return ``[1, 6]``
   
    2. ``FindClosest(intlist, 10)`` will return ``[]``


    
       
    ~~~~
    # Write your code here

    


  

    ====
    from unittest.gui import TestCaseGui

    def compareIntList(list1, list2):
        if len(list1)!=len(list2):
            return False
		
        for item1 in list1:
            if item1 not in list2:
                return False
        return True

    class myTests(TestCaseGui):
        import random
        def testOne(self):
    
            intlist = [2,1,5,6,2,3,1,3]
            self.assertEqual(compareIntList(FindClosest(intlist,1),[1,6]),True,"compareIntList([2,1,5,6,2,3,1,3],1) should return [1,6] or [6,1]")
            self.assertEqual(compareIntList(FindClosest(intlist,10),[]),True,"compareIntList([2,1,5,6,2,3,1,3],10) should return []")  
            #self.assertEqual(compareStringList(CommonItems(list2a,list2b),output2),True,"CommonItems("+str(list2a)+","+str(list2b)+") should return "+str(output2))
            #self.assertEqual(ispalindrome('h'),True,"ispalindrome('h') should return True")
            #self.assertEqual(ispalindrome('123321'),False,"ispalindrome('123321') should return False")
            #self.assertEqual(ispalindrome('123ABA321'),True,"ispalindrome('123ABA321') should return True")
            #self.assertEqual(ispalindrome('palindrome'),False,"ispalindrome('palindrome') should return False")	


    myTests().main()