.. activecode:: lhs_10_2
    :author: LHS CS Team
    :difficulty: 0.0
    :basecourse: thinkcspy
    :chapter: Lists
    :subchapter: Exercises
    :topics: Lists/Exercises
    :from_source: F
    :language: python
    :autograde: unittest
    :pct_on_first: 0.3648351648
    :total_students_attempting: 455
    :num_students_correct: 448.0
    :mean_clicks_to_correct: 5.3236607143

    Write a function ``sumOfCubes(xs)`` that computes the sum of the cubes of the numbers
    in the list xs. For example, ``sumOfCubes([2, 3, 4])`` should return 8+27+64 which is 99
    
    ~~~~
    # My Name:
    
    def sumOfCubes(xs):
        # write your code here
    
    # any test cases you'd like to have
    
    ====
    import re
    from unittest.gui import TestCaseGui
    
    class myTests(TestCaseGui):
        def _sumOfCubes(self, xs):
            sum = 0
            for e in xs:
                sum += e**3
            return sum
                
        def testOne(self):
            SelfTest = False
            if (SelfTest):
                self.assertEqual(0,1,"Auto-testing if OFF - you must check the program yourself for now")
                return
    
            print('Auto-testing...')
    
            # Check that strip is not being use
            tests = [ [1, 6, 7], [6], [0, 2, 7, 9]]
            
            i = 1
            for t in tests:
                tcopy = t[:]
                self.assertEqual(sumOfCubes(tcopy), self._sumOfCubes(t), "test "+str(i))
                i += 1
    
    myTests().main()