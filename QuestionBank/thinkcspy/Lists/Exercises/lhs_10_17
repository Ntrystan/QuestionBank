.. activecode:: lhs_10_17
    :author: LHS CS Team
    :difficulty: 0.0
    :basecourse: thinkcspy
    :chapter: Lists
    :subchapter: Exercises
    :topics: Lists/Exercises
    :from_source: F
    :language: python
    :autograde: unittest
    :pct_on_first: 0.0911330049
    :total_students_attempting: 406
    :num_students_correct: 378.0
    :mean_clicks_to_correct: 18.0978835979

    Write a function ``mergeList(list1, list2)`` that takes two pre-sorted lists of numbers
    and combines them into a single new list that is also sorted. 
    
    ``mergeList`` should be a pure function.
    
    You may **not** use the .sort method though.
    
    ~~~~
        
    def mergeList(list1, list2):
    
    def main():
        # add any test cases here
    
    if __name__ == "__main__":
        main()
        
    ====
    import re
    from unittest.gui import TestCaseGui
    
    class myTests(TestCaseGui):
        def _golden(self, list1, list2):
            newList = list1 + list2
            newList.sort()
            return(newList)
    
        def testOne(self):
            SelfTest = False
            if (SelfTest):
                self.assertEqual(0,1,"Auto-testing if OFF - you must check the program yourself for now")
                return
    
            print('Auto-testing...')
            editText = self.getEditorText()
            if len(re.findall("\.sort", editText)) != 0:
                self.assertEqual(len(re.findall("\.sort", editText)), 0, "No sort allowed")
            else:
                tests = [
                    ([1,4,6,6,7], [4,5,6,7,7,7,8,9]),
                    ([1,4,6,6,7], [4,7,8,9]),
                    ([1,4,6,6,7], [4,7,8,9,10]),
                    ([], [4,5,6,7,8,9]),
                    ([1,4,6,6,7], []),
                    ([], [])           
                    ]
                test0 = tests[0][0]
                test1 = tests[0][1]
                copy0 = test0[:]
                copy1 = test1[:]
                mergeList(copy0, copy1)
                self.assertEqual(copy0, test0, "checking that test[0][0] did not change")
                self.assertEqual(copy1, test1, "checking that test[0][1] did not change")
    
                i = 0
                for t in tests:
                    self.assertEqual(mergeList(t[0], t[1]), self._golden(t[0], t[1]), "Testing  "+str(i))
                    i += 1
    
    myTests().main()