.. activecode:: 1306_cw8_s20_q3b
    :author: Mohammad Rajiur Rahman
    :difficulty: 0
    :basecourse: thinkcspy
    :topic: Lists/Exercises
    :from_source: F
    :autograde: unittest


    **Question 3B [15 points]** 
     
    Modify the function in Question 3A above to a function ``FC2(intlist, key)`` which returns the value in the list that is closest to the ``key`` in value. In case more than one value is closest, any of them can be returned.

    For example, if ``intlist = [2,1,5,6,2,3,1,3]``

    1. ``FC2(intlist, 7)`` will return ``6``
   
    2. ``FC2(intlist, 0)`` will return ``1``


    
       
    ~~~~
    # Write your code here

    


  

    ====
    from unittest.gui import TestCaseGui

    def compareIntList(list1, list2):
        if len(list1)!=len(list2):
            return False
		
        for item1 in list1:
            if item1 not in list2:
                return False
        return True

    class myTests(TestCaseGui):
        import random
        def testOne(self):
    
            intlist = [2,1,5,6,2,3,1,3]
            self.assertEqual(FC2(intlist,7),6,"FC2([2,1,5,6,2,3,1,3],7) should return 6")
            self.assertEqual(FC2(intlist,0),1,"FC2([2,1,5,6,2,3,1,3],0) should return 1")  
            #self.assertEqual(compareStringList(CommonItems(list2a,list2b),output2),True,"CommonItems("+str(list2a)+","+str(list2b)+") should return "+str(output2))
            #self.assertEqual(ispalindrome('h'),True,"ispalindrome('h') should return True")
            #self.assertEqual(ispalindrome('123321'),False,"ispalindrome('123321') should return False")
            #self.assertEqual(ispalindrome('123ABA321'),True,"ispalindrome('123ABA321') should return True")
            #self.assertEqual(ispalindrome('palindrome'),False,"ispalindrome('palindrome') should return False")	


    myTests().main()