.. activecode:: lhs_10_6
    :author: LHS CS Team
    :difficulty: 0.0
    :basecourse: thinkcspy
    :chapter: Lists
    :subchapter: Exercises
    :topics: Lists/Exercises
    :from_source: F
    :language: python
    :autograde: unittest
    :pct_on_first: 0.1601941748
    :total_students_attempting: 412
    :num_students_correct: 404.0
    :mean_clicks_to_correct: 8.7376237624

    Write a function ``replace(lst, old, new)`` that replaces all occurences of the
    elements ``old`` with ``new`` in the list ``lst`` and returns a **new** list. the
    original list ``lst`` must remain unchanged.
    
    ~~~~
    # My Name:
    
    def replace(lst, old, new):
        # write your code here
    
    # any test cases you'd like to have
    
    ====
    from unittest.gui import TestCaseGui
    
    class myTests(TestCaseGui):
        def _replace(self, lst, old, new):
            cloneLst = lst[:]
            for i in range(len(cloneLst)):
                if cloneLst[i] == old:
                    cloneLst[i] = new
            return cloneLst
    
        def testOne(self):
            SelfTest = False
            if (SelfTest):
                self.assertEqual(0,1,"Auto-testing if OFF - you must check the program yourself for now")
                return
    
            print('Auto-testing...')
            lst = [
                ('s', 'S', ['M', 'i', 's', 's', 'i', 's', 's', 'i', 'p', 'p', 'i']),
                ('M', 'MISS', ['M', 'i', 's', 's', 'i', 's', 's', 'i', 'p', 'p', 'i']),
                (1, 10, [1,2,3,4,5,1,2,3,4,5,1]),
                (6, 16, [1,2,3,4,5,1,2,3,4,5,1]),
                ('!', '#' , [])]
            i = 0
            for (old, new, aList) in lst:
                i += 1
                self.assertEqual(replace(aList, old, new), self._replace(aList, old, new), "Test "+str(i))
            
    myTests().main()