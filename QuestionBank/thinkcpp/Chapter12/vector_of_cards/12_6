.. activecode:: 12_6
   :author: bmiller
   :difficulty: 3
   :basecourse: thinkcpp
   :topic: Chapter12/vector_of_cards
   :from_source: T
   :language: cpp

   Take a look at the active code below, which includes the implementation of
   the ``buildDeck`` function.
   ~~~~
   #include <iostream>
   #include <string>
   #include <vector>
   using namespace std;

   struct Card {
       int suit, rank;

       Card ();
       Card (int s, int r);
       void print () const;
   };

   vector<Card> buildDeck() {
       vector<Card> deck (52);
       int i = 0;
       for (int suit = 0; suit <= 3; suit++) {
           for (int rank = 1; rank <= 13; rank++) {
               deck[i].suit = suit;
               deck[i].rank = rank;
               i++;
           }
       }
       return deck;
   }

   int main() {
       vector<Card> deck = buildDeck();
       cout << "We just created our deck of 52 cards. We can access an individual card by indexing." << endl;
       cout << "For example, the first card in the deck is: "; deck[0].print();
   }

   ====

   Card::Card () {
      suit = 0;  rank = 0;
   }

   Card::Card (int s, int r) {
      suit = s;  rank = r;
   }

   void Card::print () const {
      vector<string> suits (4);
      suits[0] = "Clubs";
      suits[1] = "Diamonds";
      suits[2] = "Hearts";
      suits[3] = "Spades";

      vector<string> ranks (14);
      ranks[1] = "Ace";
      ranks[2] = "2";
      ranks[3] = "3";
      ranks[4] = "4";
      ranks[5] = "5";
      ranks[6] = "6";
      ranks[7] = "7";
      ranks[8] = "8";
      ranks[9] = "9";
      ranks[10] = "10";
      ranks[11] = "Jack";
      ranks[12] = "Queen";
      ranks[13] = "King";

      cout << ranks[rank] << " of " << suits[suit] << endl;
   }