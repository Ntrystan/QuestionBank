.. activecode:: IT105_AY182_GradedLab02_03
   :author: Tom Babbitt
   :difficulty: 0.0
   :basecourse: thinkcspy
   :topic: IT105Resources/Exercises
   :from_source: F
   :language: python
   :nocodelens:
   
   Your computer, along with a number of other computers, are trying to send packets through a router. Only one computer can talk at a time. The router randomly selects the ID of the next computer to talk to. Write a function that takes the number of computers on the network and the ID for your computer **(see note 1 below about selecting IDs)**. The function should return the number of tries it takes until **Your ID** matches the ID the router selected.

   Write a function ``findNumTries(numConnections, myID)``
   that will take the number of connections to a router and the ID for the requesting computer. The function will ``return`` the number of tries. 
   
   **Note 1:** ``myID`` is between 1 and ``numConnections``
   
   **Note 2:** Assume that all connections are continually attempting to broadcast at the same time and each has equal probability of being selected for each try.
    
   Example: 

   ::     
      
      ### There are 5 connections to the wireless access point
      print(findNumDelays(5,2))
       
      
   
   Results:

   ::
   
      ### This will be a random integer; equating to the number of tries.
   

   ~~~~
   ### Name:

   import random
   ###write your code here.
   
   
   
   ====
   from unittest.gui import TestCaseGui
  
   class myTests(TestCaseGui):
      
      def golden_func(self,connections, myID):
         count = 1
         num = random.randint(1,connections)
         while num != myID:
            count = count + 1
            num = random.randint(1,connections)
         return(count)

      def testOne(self):
         print('Auto-testing...')
         count = 0
         for i in range(1,101,5):
            a = 2 * i
            b = random.randint(1,a)        	
            random.seed(i)
            answer = self.golden_func(a,b)
            random.seed(i)
            count+=1
            self.assertEqual(findNumTries(a,b), answer, "Random try # " + str(count) + "; numConnections = " + str(a) + "; myID = " + str(b))

   myTests().main()  
    