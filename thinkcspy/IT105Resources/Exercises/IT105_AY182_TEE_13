.. activecode:: IT105_AY182_TEE_13
    :author: Tom Babbitt
    :difficulty: 0.0
    :basecourse: thinkcspy
    :topic: IT105Resources/Exercises
    :from_source: F
    :language: python
    :autograde: unittest
    :nocodelens:

    Finish the function ``sumByThree(num)`` that calculates and has a **return** value for the sum of the sequence ``1,4,7,10, ... , num``. 
    You must use ``range``.
   
    Example:

    ::
      
      print(sumByThree(10))
   
    Results:

    ::

       22

    **Notes:** 

    #. Ensure you take into account the maximum value in the sequence.

    #. You can delete the ``pass`` lines below or leave it in the code. It does not do anything other serve as a line in a function body to avoid a syntax error.
    ~~~~
    def sumByThree(num):
       pass 
       # write your code here

    ====
    import re
    import random
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        # counts how many instances of 'keyword'
        def count_code(self, code, keyword):
            cnt = 0
            for line in code.splitlines():
                words = line.split()
                for val in words:
                    if val.find(keyword) >= 0:
                        cnt = cnt + 1
            return(cnt)

        def check_output(self, num):
            if len(num) != 10:
                return(False)
            for i in num:
                if (int(i) > 12) or (int(i) < 2):
                    return(False)
            return(True)

        def golden_func(self, n):
            sum = 0
            for i in range(1,n+1,3):
               sum+=i
            return(sum)

        def testOne(self):
            editText = self.getEditorText()
            numTests = 3
            for i in range(0,numTests):
               num = random.randint(1,1000)
               answer = self.golden_func(num)
               self.assertEqual(sumByThree(num), answer, "Random value - " + str(i+1) + " (Num = " + str(num) + " Expected Value = " + str(answer) +")")
            self.assertTrue(self.count_code(editText, 'range') >= 1, "You must use the range function")
 

    myTests().main()
