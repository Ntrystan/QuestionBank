.. activecode:: lhs_9_13_FIXED
    :author: Bill Montana
    :difficulty: 0
    :basecourse: thinkcspy
    :topic: Strings/Exercises
    :from_source: F
    :language: python
    :autograde: unittest

    An ISBN (International Standard Book Number) has ten digits. The first nine digits
    may have values from '0' to '9'; they identify the country in which the book was
    printed, the publisher, and the individual book. The tenth digit is a "check digit"
    assigned in such a way that the number d\ :sub:`1`\ d\ :sub:`2`\ d\ :sub:`3`\ d\ :sub:`4`\ d\ :sub:`5`\ d\ :sub:`6`\ d\ :sub:`7`\ d\ :sub:`8`\ d\ :sub:`9`\ d\ :sub:`10` has the property:
    
        (10d\ :sub:`1` + 9d\ :sub:`2` + 8d\ :sub:`3` + 7d\ :sub:`4` + 6d\ :sub:`5` + 5d\ :sub:`6` + 4d\ :sub:`7` + 3d\ :sub:`8` + 2d\ :sub:`9` + d\ :sub:`10`) mod 11 = 0
    
    "mod" stands for modulo division (same as % in Python). If d\ :sub:`10` needs the
    value 10 to balance the check digit equation, then the character 'X' is used.
    For example, 096548534X is a valid ISBN.

    Note that if we simply took the sum of all the digits, the check digit would remain
    valid for any permutation of the digits. Different coefficients make the number
    invalid when any two digits are swapped, catching a common typo.

    Write a function

    .. sourcecode:: python

            isValidISBN( isbn )

    that returns ``True`` if ``isbn`` represents a valid ISBN, ``False`` otherwise.

    ~~~~

    import string

    def isValidISBN( isbn ):
        
        # Your code here
        
        return False # FIX THIS!!!

    def main():
        print(isValidISBN("096548534X"))
        print(isValidISBN("1234567890"))
    
    if __name__ == "__main__":
        main()

    ====
    
    import string

    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def _isValidISBN( self, isbn ):
            sum = 0
            if len(isbn) != 10:
                return False
            d = isbn[9]
            if d.upper() == 'X':
                sum = 10
            elif d in string.digits:
                sum = int(d)
            else:
                return False
    
            for i in range(8, -1, -1 ):
                d = isbn[i]
                if d in string.digits:
                    sum += ( 10 - i ) * int(d)
                else:
                    return False

            return sum % 11 == 0       

        def testOne(self):
            print('\nAuto-testing...')
        
            tests = [ "096548534X",
                      "1234567890",]
                
            for isbnStr in tests:
                self.assertEqual(isValidISBN(isbnStr), self._isValidISBN(isbnStr), isbnStr)
            
    myTests().main()