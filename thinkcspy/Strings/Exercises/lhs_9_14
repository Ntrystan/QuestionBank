.. activecode:: lhs_9_14
    :author: LHS CS Team
    :difficulty: 0
    :basecourse: thinkcspy
    :topic: Strings/Exercises
    :from_source: F
    :language: python
    :autograde: unittest

    Write a **boolean** function that determines whether all the characters in a string are the same,
    using only library string functions, but no loops or recursion. For empty strings, you should
    return ``True``.

    ~~~~

    def isAllSame( s ):
        
        # Your Code Here
        
        return False  # FIX THIS!!!

    def main():
        print(isAllSame("----"))  # should print 'True'
        print(isAllSame("L--L--LL-L--"))  # should print 'False'
    
    if __name__ == "__main__":
        main()

    ====

    import re
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def _isAllSame( self, s ):
            if len(s) <= 1:
                return True;
            s1 = s[0:len(s) - 1]
            s2 = s[1:]
            return s1 == s2    

        def testOne(self):
            print('\nAuto-testing...')
            editText = self.getEditorText()
            
            noWhile = len(re.findall("\s*while[( ]", editText)) == 0
            noFor = len(re.findall("\s*for ", editText)) == 0

            #self.assertEqual(0, len(re.findall("\s*while[( ]", editText)), "Should use no 'while' loops")
            #self.assertEqual(0, len(re.findall("\s*for ", editText)), "Should use no 'for' loops")      

            tests = [ "",
                      "-",
                      "AAAAAAAAAAAA",
                      "AABBABABBAAB"]
                
            testsPass = True
            for testStr in tests:
                testsPass = testsPass and isAllSame(testStr) == self._isAllSame(testStr)
                #self.assertEqual(isAllSame(testStr), self._isAllSame(testStr), "test string =\"" + testStr + "\"")
            
            self.assertTrue(noWhile and noFor and testsPass, "Overall testing")

    myTests().main()