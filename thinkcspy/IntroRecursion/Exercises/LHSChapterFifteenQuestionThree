.. activecode:: LHSChapterFifteenQuestionThree
    :author: Wesley Thang
    :difficulty: 1.0
    :basecourse: thinkcspy
    :topic: IntroRecursion/Exercises
    :from_source: F
    :language: python
    :autograde: unittest

    Say that a female rabbit is mature 2 months after birth. Assume that each
    mature female rabbit produces 1 baby female rabbit per month. If you start
    out with one baby female rabbit, how many female rabbits will you have in
    ``n`` months? Assume that there are enough male rabbits to ensure maximum
    production, and that no rabbits die.

    This problem was studied and solved by a famous mathematician, Fibonacci.
    The numbers of rabbits form the Fibonacci series. This series has important
    applications in several problems that have nothing to do with rabbits.
    Call the ``n``'th number in the series ``fib(n)``.
    
    Here is the complete math-like definition for the Fibonacci series.
    There are two base cases. This is fine. Recursion breaks problems into
    smaller pieces. After enough breaking, all that remains are the base cases
    that can be solved immediately. There can be any number of base cases.

    .. sourcecode:: python

        fib( 1 ) = 1       (base case)

        fib( 2 ) = 1       (base case)

        fib( n ) = fib( n-1 ) + fib( n-2 )

    Translate the math-like definition of ``fib`` into a Python functions that returns
    a given value from the Fibonacci series. Test your program.

    ~~~~
    def fib(n):
        # Your recursive code here

    def main():
        # Your test code here
    
    if __name__ == "__main__":
        main()
    ====
    import re
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            SelfTest = False
            if (SelfTest):
                self.assertEqual(0,1,"Auto-testing if OFF - you must check the program yourself for now")
                return

            editText = self.getEditorText()
            self.assertEqual(0, len(re.findall("\s*while[( ]", editText)), "Should use no 'while' loops")
            self.assertEqual(0, len(re.findall("\s*for ", editText)), "Should use no 'for' loops")

            self.assertEqual(0, fib(0), "Testing fib(0)")
            self.assertEqual(1, fib(1), "Testing fib(1)")
            self.assertEqual(8, fib(6), "Testing fib(6)")
            self.assertEqual(55, fib(10), "Testing fib(10)")
            self.assertEqual(610, fib(15), "Testing fib(15)")
            
    myTests().main()