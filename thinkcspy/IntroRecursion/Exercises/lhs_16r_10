.. activecode:: lhs_16r_10
    :author: LHS CS Team
    :difficulty: 0.0
    :basecourse: thinkcspy
    :topic: IntroRecursion/Exercises
    :from_source: F
    :language: python
    :autograde: unittest

    Write a **recursive** function ``stringEqual()`` that returns a boolean if a string ``strA`` 
    equals the other string ``strB``.

    You can only compare one character at a time (i.e. ``strA[i] == strB[j]``).

    You cannot simply ``return(strA == strB)``. 

    ~~~~
    def stringEqual(strA, strB):
        # Your recursive code here

    def main():
        # Your test code here
    
    if __name__ == "__main__":
        main()

    ====
    import re
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
        def testOne(self):
            SelfTest = False
            if (SelfTest):
                self.assertEqual(0,1,"Auto-testing if OFF - you must check the program yourself for now")
                return

            print('Auto-testing...')

            editText = self.getEditorText()
            self.assertEqual(0, len(re.findall("\s*while[( ]", editText)), "Should use no 'while' loops")
            self.assertEqual(0, len(re.findall("\s*for ", editText)), "Should use no 'for' loops")

            tests = [('abcde', 'abcde'),
                 ('abcde', 'abcdz'),
                 ('abcde', 'zbcde'),
                 ('a', 'a'),
                 ('abcde', 'abcdef'),
                 ('abcdef', 'abcde')]

            for t in tests:
                self.assertEqual(stringEqual(t[0], t[1]), (t[0] == t[1]), 'Testing stringEqual({}, {})'.format(t[0], t[1]) )

    myTests().main()

