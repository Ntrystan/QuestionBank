.. activecode:: lhs_4_5
    :author: LHS CS Team
    :difficulty: 0
    :basecourse: thinkcspy
    :topic: PythonTurtle/Exercises
    :from_source: F
    :language: python
    :autograde: unittest

    Print out the following output.
    
    You must use exactly 2 ``for`` statements, 2 ``range`` statements, and 3 ``print`` statements.
    
    **HINT**: As a start, try just printing out the 'Calculating x ** 1/2/3' and the '===' with a single
    ``for`` loop. Then try using a second ``for`` loop for printing the 1/3/5, 1/9/25, and 1/27/125.


    ::

      Calculating x ** 1
      1
      3
      5
      ====
      Calculating x ** 2
      1
      9
      25
      ====
      Calculating x ** 3
      1
      27
      125
      ====

    ~~~~
    # My Name:

    # write your code here

    ====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        # counts how many lines have 'keyword' in word position 'where'
        def count_code(self, code, keyword, where):
            cnt = 0
            for line in code.splitlines():
                word = line.split()
                if where < len(word):
                    # parse function keyword
                    if '(' in word[where]:
                        word = word[where].split('(')
                        if word[0] == keyword:
                            cnt = cnt + 1
                    else:
                        if word[where] == keyword:
                            cnt = cnt + 1
            return(cnt)
    
        def testOne(self):
            outText = self.getOutput()
            editText = self.getEditorText()
            golden_str = ""
            for power in range(1,4):
                golden_str = golden_str + "Calculating x ** " + str(power) + "\n"
                for i in range(1,6,2):
                    golden_str = golden_str + str(i ** power) + "\n"
                golden_str = golden_str + "====\n"
                
            self.assertIn(golden_str, outText, "Comparing printed output")
            self.assertNotIn('25', editText, "Checking no hard coded outputs")
            self.assertEqual(2, self.count_code(editText, 'for', 0), "Checking 'for' usage")
            self.assertEqual(2, self.count_code(editText, 'range', 3), "Checking 'range' usage")
            self.assertEqual(3, self.count_code(editText, 'print', 0), "Checking 'print' usage")
        
    myTests().main()