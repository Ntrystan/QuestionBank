.. activecode:: lhs_8_11
    :author: LHS CS Team
    :difficulty: 0
    :basecourse: thinkcspy
    :topic: MoreAboutIteration/Exercises
    :from_source: F
    :language: python
    :autograde: unittest

    After you have scaled an image too much it looks blocky.  One way of
    reducing the blockiness of the image is to replace each pixel with the
    average values of the pixels around it. This has the effect of smoothing
    out the changes in color. Write a function ``smooth(img, w, h)`` that takes
    an image of size w x h and **returns** a new image of the same size as the
    original but smoothed. To smooth a pixel at location (c, r) you would need to
    average the color components of nine values located as follows:

    ::

        (c-1, r-1)   (c, r-1)  (c+1, r-1)
        (c-1  r  )   (c, r  )  (c+1, r  )
        (c-1, r+1)   (c, r+1)  (c+1, r+1)

    The edges of the image are a problem because only some of the nine values that
    go into the average exist. The suggested way to deal with this is for each location
    in the image, average together only those of the nine values that exist.
    This calls for some fairly tricky ``if`` statements, or a tricky set of ``for``
    statements inside the outer two (yes, a possible total of 4 ``for`` statements).

    **NOTE:** When doing the average of the value for the RGB, use an integer divide ``//`` 
    according to how surrounding pixel exist around the pixel you are trying to smooth.

    **HINT:** Be very careful not to mix up the ``row/col/w/h`` meanings. Think very carefully
    if maybe you are using ``row`` when it should be ``col`` or if you are using ``w``
    when you should be using ``row``.

    ~~~~
    import image
    import random

    def makeBlockImage(imgWidth, imgHeight, blockWidth, blockHeight, seed):
        random.seed(seed)
        newImg = image.EmptyImage(imgWidth, imgHeight)

        for x in range(0, imgWidth, blockWidth):
            for y in range(0, imgHeight, blockHeight):
                r = random.randrange(256)
                g = random.randrange(256)
                b = random.randrange(256)
                for row in range(x, x + blockWidth):
                    for col in range(y, y + blockHeight):
                        newpixel = image.Pixel(r, g, b)
                        if row < imgWidth and col < imgHeight:
                            newImg.setPixel(row, col, newpixel)
        return newImg

    def smooth(img, w, h):
        newImg = image.EmptyImage(w, h)

        # YOUR CODE HERE

        return newImg

    def main():
        win = image.ImageWin()
        width = 100
        height = 50
        img = makeBlockImage(width, height, 10, 10, 1)
        img.draw(win)

        smooth(img, width, height).draw(win)
        win.exitonclick()

    if __name__ == "__main__":
        main()

    ====
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):

        def _makeBlockImage(self, imgWidth, imgHeight, blockWidth, blockHeight, seed):
            random.seed(seed)
            newImg = image.EmptyImage(imgWidth, imgHeight)

            for x in range(0, imgWidth, blockWidth):
                for y in range(0, imgHeight, blockHeight):
                    r = random.randrange(256)
                    g = random.randrange(256)
                    b = random.randrange(256)
                    for row in range(x, x + blockWidth):
                        for col in range(y, y + blockHeight):
                            newpixel = image.Pixel(r, g, b)
                            if row < imgWidth and col < imgHeight:
                                newImg.setPixel(row, col, newpixel)
            return newImg

        def _smooth(self, img, w, h):
            newImg = image.EmptyImage(w, h)
            x = 0
            while x < w:
                y = 0
                while y < h:
                    sumR = 0
                    sumG = 0
                    sumB = 0
                    pixCount = 0
                    for px in range(x - 1, x + 2, 1):
                        for py in range(y - 1, y + 2, 1):
                            if px >= 0 and px < w and py >= 0 and py < h:
                                p = img.getPixel(px, py)
                                sumR += p.getRed()
                                sumG += p.getGreen()
                                sumB += p.getBlue()
                                pixCount += 1
                    newpixel = image.Pixel(sumR//pixCount, sumG//pixCount, sumB//pixCount)
                    newImg.setPixel(x, y, newpixel)
                    y += 1
                x += 1
            return newImg

        def cmpImage(self, i1, i2, col, row):
            count = 0
            for c in range(col):
                for r in range(row):

                    p = i1.getPixel(c, r)
                    r1 = p.getRed()
                    g1 = p.getGreen()
                    b1 = p.getBlue()

                    p = i2.getPixel(c, r)
                    r2 = p.getRed()
                    g2 = p.getGreen()
                    b2 = p.getBlue()  

                    if (r1 != r2) or (g1 != g2) or (b1 != b2):
                        count = count + 1
                        if count == 1:
                            print("First pixel miscompare at col:", c, "row:", r)
                            print("Expected RGB:", r2, g2, b2, "Your RGB:", r1, g1, b1)

            return(count)

        def testOne(self):
            w = 10
            h = 20
            i1 = self._makeBlockImage(w, h, 2, 2, 123)
            i2 = self._makeBlockImage(w, h, 2, 2, 123)
            i1 = smooth(i1, w, h)
            i2 = self._smooth(i2, w, h)
            count = self.cmpImage(i1, i2, w, h)
            self.assertEqual(count, 0, "Comparing pixels and counting differences")

    myTests().main()