.. activecode:: lhs_17_7
    :author: LHS CS Team
    :difficulty: 0
    :basecourse: thinkcspy
    :topic: ClassesDiggingDeeper/Exercises
    :from_source: F
    :language: python
    :autograde: unittest

    The built-in Python ``float()`` function calls the ``__float__`` method within
    a class definition to return the floating point value of the object.

    Define the ``__float__`` method for the Fraction class so that it **returns**
    a **floating point** value for the fraction.

    ``print(float(Fraction(1, 2)))`` should print out ``0.5``

    ~~~~
    import test
    
    def gcd(m, n):
        while m % n != 0:
            oldm = m
            oldn = n
    
            m = oldn
            n = oldm % oldn
    
        return n
    
    class Fraction:
    
        def __init__(self, top, bottom):
    
            self.num = top        # the numerator is on top
            self.den = bottom     # the denominator is on the bottom
    
        def __str__(self):
            return str(self.num) + "/" + str(self.den)
    
        def simplify(self):
            common = gcd(self.num, self.den)
    
            self.num = self.num // common
            self.den = self.den // common
    
        def __add__(self,otherfraction):
    
            newnum = self.num*otherfraction.den + self.den*otherfraction.num
            newden = self.den * otherfraction.den
            
            f = Fraction(newnum, newden)
            f.simplify()
            return( f )
    
        def __float__ (.......):
            '''
            Implementation for Python float()
            '''
    
    # Make test cases here

    ====

    from unittest.gui import TestCaseGui
    
    class myTests(TestCaseGui):
        def testOne(self):
            SelfTest = False
            if (SelfTest):
                self.assertEqual(0,1,"Auto-testing if OFF - you must check the program yourself for now")
                return
            
            print("Auto-Testing...")
            tests = [ (5,8),
                      (3,7)
                     ]
    
            num=0
            for (t) in tests:
                self.assertEqual(float(Fraction(t[0], t[1])), t[0]/t[1], 'test case ' + str(num))
                num += 1

    myTests().main()