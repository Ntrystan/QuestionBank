.. mchoice:: qtnt1_6
   :author: bmiller
   :difficulty: 3
   :basecourse: csjava
   :topic: Tests/test1nt
   :from_source: T
   :answer_a: 25
   :answer_b: 15
   :answer_c: 125
   :answer_d: 64
   :answer_e: 625
   :correct: c
   :feedback_a: This would be correct if we only had one inner for loop, but there are two.
   :feedback_b: The outer loop will execute 5 times, each time the outer loop executes the middle loop will execute 5 times, and each time the middle loop executes the inner loop will execute 5 times.  So the answer is 5 * 5 * 5 = 125.
   :feedback_c: The number of times a loop executes is (largest value in loop - smallest value in loop + 1) each loop executes (5 - 1 + 1 = 5) times.  When you have nested loops you multiply the number of times each loop executes.  So the result is 5 for the outer loop * 5 for the middle loop * 5 for the innermost loop.
   :feedback_d: This would be correct if we called solution(4) or the conditions to stop each loop were just less than, and not less than or equal to.
   :feedback_e: If you got this value you probably made one extra call to the each of the loops, notice that the loops start at 1 and not 0.

   Consider the following block of code. What value is returned from ``solution(5)``?

   .. code-block:: java

      public int solution(int limit)
      {
        int s = 0;

        for (int outside = 1; outside <= limit; outside++)
        {
            for (int middle = 1; middle <= limit; middle++)
            {
                for (int inside = 1; inside <= limit; inside++)
                {
                    s++;
                }
            }
        }
        return s;
      }