.. activecode:: lst_change12cpp
   :author: bmiller
   :difficulty: 3.0
   :basecourse: cppds
   :topic: Recursion/DynamicProgramming
   :from_source: T
   :caption: Recursively Counting Coins with Table Lookup Python
   :language: python
   :optional:

   #Recursive example of trying to get the least amount of coins to make up an amount of change.

   def recMC_greedy(coinValueList,change):
     if change == 0:  #base case if, change is 0, then the number of coins have been finalized
       return 0
     else:
       cur_max = max(coinValueList) #use the maximum in the list to see how many of these can be used to form the sum
       count = change//cur_max #find how many of the max is needed to make the change so that the number of coins used is minimum
       index = coinValueList.index(cur_max)
       del coinValueList[index]   #erasing the current max so that a different max can be
                                  #used in next recursion and continue the greedy process
       return count + recMC_greedy(coinValueList, change-cur_max * count) #returns the counts of the coins using recursion

   def main():
     print(recMC_greedy([1, 5, 10, 21, 25], 63)) #using the greedy algorithm for the edge case 63 whose optimal solution is 3 coins of 21
                                            #but greedy algorithm gives 6 coins which is not the most optimum solution
   main()