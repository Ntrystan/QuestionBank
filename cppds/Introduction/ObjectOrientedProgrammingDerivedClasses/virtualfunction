.. activecode:: virtualfunction
  :author: bmiller
  :difficulty: 3.0
  :basecourse: cppds
  :topic: Introduction/ObjectOrientedProgrammingDerivedClasses
  :from_source: T
  :language: cpp
  :caption: Using a virtual function with inheritence

  #include <iostream>
  using namespace std;

  class Base {
      public:
          virtual void printType() { // Creates function called  printType
              subfunction();
              cout << "I'm inherited!" << endl << endl;
          }

          virtual void subfunction(){
          // empty
          }
  };

  class SubFirst : public Base {
      virtual void subfunction() {
          cout << "I'm one type of sub-class!" << endl;
      }
  };

  class SubSecond : public Base {
      virtual void subfunction() {
          cout << "I'm another type of sub class!" << endl;
      }
  };

  int main() {
      SubFirst first;       // runs  subfirst class using printType virtual function
      first.printType();    // calls Subfirst class, and runs virtual function on it's own

      SubSecond second;    // runs  subsecond class using printType virtual function
      second.printType();  // calls Subsecond class, and runs virtual function on it's own

      return 0;
  }

