.. activecode:: ac21_5_7
   :author: bmiller
   :difficulty: 3.0
   :basecourse: fopp
   :topic: AdvancedAccumulation/zip
   :from_source: T

   def possible(word, blanked, guesses_made):
       if len(word) != len(blanked):
           return False
       for (bc, wc) in zip(blanked, word):
           if bc == '_' and wc in guesses_made:
               return False
           elif bc != '_' and bc != wc:
               return False
       return True

   print(possible("wonderwall", "_on__r__ll", "otnqurl"))
   print(possible("wonderwall", "_on__r__ll", "wotnqurl"))

   =====

   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):

      def testOne(self):
         self.assertEqual(possible("HELLO", "_ELL_", "ELJ"), True, "Testing whether possible has been correctly defined.")
         self.assertEqual(possible("HELLO", "_ELL_", "ELJH"), False, "Testing whether possible has been correctly defined.")
         self.assertEqual(possible("HELLO", "_E___", "ELJ"), False, "Testing whether possible has been correctly defined.")

   myTests().main()
